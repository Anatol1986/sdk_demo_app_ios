
#if TARGET_OS_SIMULATOR
#if 0
#elif defined(__x86_64__) && __x86_64__
// Generated by Apple Swift version 5.0.1 (swiftlang-1001.0.82.4 clang-1001.0.46.5)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <Foundation/Foundation.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if __has_attribute(noreturn)
# define SWIFT_NORETURN __attribute__((noreturn))
#else
# define SWIFT_NORETURN
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if defined(__has_attribute) && __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility)
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if __has_feature(attribute_diagnose_if_objc)
# define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
#else
# define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
#endif
#if __has_feature(modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import Foundation;
@import ObjectiveC;
#endif

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="ChatVisitorClient",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif


/// The <code>ZDKAgent</code> model has information about an agent in a chat session,
/// such as their backend <code>id</code>, their display <code>name</code>, their <code>avatar</code>, and if they’re currently typing.
SWIFT_CLASS_NAMED("Agent")
@interface ZDKAgent : NSObject
/// ID associated with the agent
@property (nonatomic, readonly, copy) NSString * _Nonnull id;
/// The display name of the agent
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
/// The URL of the agent’s avatar if it’s present
@property (nonatomic, readonly, copy) NSURL * _Nullable avatar;
/// Whether the agent is currently typing in the chat
@property (nonatomic) BOOL isTyping;
/// Returns a Boolean value that indicates whether the receiver and a given object are equal.
/// \param object the object to compare against
///
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// The <code>ZDKAttachment</code> model, contains information about attachments that were sent or received
/// by the visitor.  underlying attachment sent with as part of the <code>ChatAttachment</code> log.
SWIFT_CLASS_NAMED("Attachment")
@interface ZDKChatAttachment : NSObject
/// Returns a string representing the <code>type</code> of this attachment. Currently this should always be <code>chat.file</code>.
@property (nonatomic, readonly, copy) NSString * _Nonnull type;
/// <code>Name</code> of the attachment
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
/// <code>Mimetype</code> associated with the attachment
@property (nonatomic, readonly, copy) NSString * _Nonnull mimeType;
/// The <code>size</code> of the attachment in kb
@property (nonatomic, readonly) NSInteger size;
/// The <code>url</code> where the attachemt is stored
@property (nonatomic, readonly, copy) NSString * _Nonnull url;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// Base class for chat log events that may occur in a chat session
/// Different LogTypes
/// <ul>
///   <li>
///     <code>ChatMessage</code>, <code>ChatAttachment</code>,  <code>ChatMemberJoin</code>, <code>ChatMemberLeave</code>
///   </li>
/// </ul>
SWIFT_CLASS_NAMED("ChatLog")
@interface ZDKChatLog : NSObject
/// ID
@property (nonatomic, readonly, copy) NSString * _Nonnull id;
/// Identifier associated with the sender. Used to distinguish <code>sender</code>
@property (nonatomic, readonly, copy) NSString * _Nonnull nick;
/// Display Name
@property (nonatomic, readonly, copy) NSString * _Nonnull displayName;
/// Timestamp of when the message was sent
@property (nonatomic, readonly) NSTimeInterval timestamp;
/// A textual representation of this instance.
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
/// Returns a Boolean value that indicates whether the receiver and a given object are equal.
/// \param object the object to compare against
///
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// The Chat Log attachment
SWIFT_CLASS_NAMED("ChatAttachment")
@interface ZDKChatAttachmentMessage : ZDKChatLog
@property (nonatomic, readonly, copy) NSString * _Nonnull message;
@property (nonatomic, readonly, strong) ZDKChatAttachment * _Nonnull attachment;
/// Returns a Boolean value that indicates whether the receiver and a given object are equal.
/// \param object the object to compare against
///
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
@end





/// Chat Member Join event
SWIFT_CLASS_NAMED("ChatMemberJoin")
@interface ZDKChatMemberJoin : ZDKChatLog
/// The channel id which the agent joined.
@property (nonatomic, readonly, copy) NSString * _Nonnull channel;
/// A textual representation of this instance.
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
/// Returns a Boolean value that indicates whether the receiver and a given object are equal.
/// \param object the object to compare against
///
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
@end




@interface ZDKChatMemberJoin (SWIFT_EXTENSION(ChatVisitorClient))
@property (nonatomic, readonly, copy) NSString * _Nonnull debugDescription;
@end


/// Chat Member Leave event
SWIFT_CLASS_NAMED("ChatMemberLeave")
@interface ZDKChatMemberLeave : ZDKChatLog
/// The channel id which the agent left.
@property (nonatomic, readonly, copy) NSString * _Nonnull channel;
/// Returns a Boolean value that indicates whether the receiver and a given object are equal.
/// \param object the object to compare against
///
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
@end




@interface ZDKChatMemberLeave (SWIFT_EXTENSION(ChatVisitorClient))
/// A textual representation of this instance.
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@property (nonatomic, readonly, copy) NSString * _Nonnull debugDescription;
@end


/// Chat message
SWIFT_CLASS_NAMED("ChatMessage")
@interface ZDKChatMessage : ZDKChatLog
/// Message from sender
@property (nonatomic, readonly, copy) NSString * _Nonnull message;
/// Returns a Boolean value that indicates whether the receiver and a given object are equal.
/// \param object the object to compare against
///
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
@end




@interface ZDKChatMessage (SWIFT_EXTENSION(ChatVisitorClient))
/// A textual representation of this instance.
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@property (nonatomic, readonly, copy) NSString * _Nonnull debugDescription;
@end

/// Chat phase describes current state of the session
typedef SWIFT_ENUM(NSInteger, ChatPhase, closed) {
/// Initialisation phase.
/// Chat hasn’t started yet
  ChatPhaseInitialising = 0,
  ChatPhaseConfiguring = 1,
/// Chat is ready to send & receive messages
  ChatPhaseActive = 2,
/// Chat session has ended
  ChatPhaseEnded = 3,
};

@class ZDKQueuePosition;

/// <code>ZDKChatState</code> is a model representation of the current chat session.
/// Can gather information about the <code>agents</code> in the session, the visitor’s <code>queuePosition</code>,
/// what <code>phase</code> the chat is in, and the list of <code>logs</code> in the session
SWIFT_CLASS_NAMED("ChatState")
@interface ZDKChatState : NSObject
/// Empty chat state
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) ZDKChatState * _Nonnull empty;)
+ (ZDKChatState * _Nonnull)empty SWIFT_WARN_UNUSED_RESULT;
/// <code>[Agent]</code> assigned to the channel
@property (nonatomic, readonly, copy) NSArray<ZDKAgent *> * _Nonnull agents;
/// Whether the chat session is active. If <code>false</code> then the chat has ended.
@property (nonatomic, readonly) BOOL isChatting;
/// Array of ChatLogs that have occured in the chat. eg. Member join/leave, attachments
@property (nonatomic, readonly, copy) NSArray<ZDKChatLog *> * _Nonnull logs;
/// Queue position
@property (nonatomic, readonly, strong) ZDKQueuePosition * _Nonnull queuePosition;
/// The phase of the current chat session.
@property (nonatomic, readonly) enum ChatPhase chatPhase;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

/// Represents different states of the<code>ChatSession</code>
typedef SWIFT_ENUM_NAMED(NSInteger, ZDKConnectionState, "ConnectionState", closed) {
/// Indicating the client is trying to connect to the backend.
  ZDKConnectionStateConnecting = 0,
/// The <code>ChatSession</code> has connected to the backend and is ready to send/receive messages.
  ZDKConnectionStateConnected = 1,
/// The <code>ChatSession</code> has disconnected. Can be caused by network connection, or a user ending
/// the session with <code>ChatSession.disconnect()</code>
  ZDKConnectionStateDisconnected = 2,
/// The <code>ChatSession</code> is trying to reconnect to a chat that was already in session.
  ZDKConnectionStateReconnecting = 3,
/// Failed to reconnect to the web-socket
  ZDKConnectionStateFailed = 4,
};


/// Department model contains id associated with the department,
/// the department name, and the current status of the department.
SWIFT_CLASS_NAMED("Department")
@interface ZDKDepartment : NSObject
/// ID associated with the department
@property (nonatomic, readonly, copy) NSString * _Nonnull id;
/// Department name
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
@property (nonatomic, readonly, copy) NSString * _Nonnull ZDKStatus;
/// Returns a Boolean value that indicates whether the receiver and a given object are equal.
/// \param object the object to compare against
///
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


@interface ZDKDepartment (SWIFT_EXTENSION(ChatVisitorClient))
/// A textual representation of this instance.
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@property (nonatomic, readonly, copy) NSString * _Nonnull debugDescription;
@end


/// Unsubscribe from observers
SWIFT_CLASS_NAMED("ObservationToken")
@interface ZDKObservationToken : NSObject
- (void)cancel;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// <code>ZDKQueuePosition</code> is a model that represents the current queue position of the visitor.
SWIFT_CLASS_NAMED("QueuePosition")
@interface ZDKQueuePosition : NSObject
/// An <code>id</code> that is used to help handle updates to the queue position in the UI layer.
@property (nonatomic, readonly, copy) NSString * _Nonnull id;
/// The visitors’ current position in the queue.
@property (nonatomic) NSInteger queue;
/// Returns a Boolean value that indicates whether the receiver and a given object are equal.
/// \param object the object to compare against
///
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// Visitor information that can be seen in the Chat dashboard
/// Contains <code>name</code>, <code>email</code>, and <code>phoneNumber</code>
/// note:
/// <code>email</code> is parsed and should be in correct email format. <code>phoneNumber</code> is not parsed.
SWIFT_CLASS_NAMED("VisitorInfo")
@interface ZDKVisitorInfo : NSObject
/// Name
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
/// E-mail
@property (nonatomic, readonly, copy) NSString * _Nonnull email;
/// Phone number
@property (nonatomic, readonly, copy) NSString * _Nonnull phoneNumber;
/// Initializer to update the visitor’s information.
/// \param name Name
///
/// \param email E-mail
///
/// \param phoneNumber Phone number
///
- (nonnull instancetype)initWithName:(NSString * _Nonnull)name email:(NSString * _Nonnull)email phoneNumber:(NSString * _Nonnull)phoneNumber OBJC_DESIGNATED_INITIALIZER;
/// Returns a Boolean value that indicates whether the receiver and a given object are equal.
/// \param object the object to compare against
///
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// A Custom Update Event that can be seen in the agent dashboard.
/// The <code>VisitorPath</code> API is a way to know if visitors have performed certain events in your app.
/// <code>VisitorPath</code> events can be queued before a chat has started,
/// and they’ll be sent when the first message is sent.
/// note:
/// The <code>url</code> field is unparsed by the backend, so it can be any <code>String</code>.
/// If subsequent <code>url</code>s are the same, only the initial <code>VisitorPath</code> update will be sent.
/// If <code>url</code> parameter of <code>VisitorPath</code> is not specified, an <code>ISO8601</code> timestamp will be sent.
SWIFT_CLASS_NAMED("VisitorPath")
@interface ZDKVisitorPath : NSObject
/// Custom event
@property (nonatomic, readonly, copy) NSString * _Nonnull event;
/// Optional url string. <code>ISO8601</code> timestamp by default.
@property (nonatomic, readonly, copy) NSString * _Nonnull url;
/// Initializer for <code>VisitorPath</code> updates
/// \param event The user-event
///
/// \param url Another string associated with the event.
///
- (nonnull instancetype)initWithEvent:(NSString * _Nonnull)event url:(NSString * _Nonnull)url OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


@interface ZDKVisitorPath (SWIFT_EXTENSION(ChatVisitorClient))
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
@end

#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#pragma clang diagnostic pop

#elif defined(__i386__) && __i386__
// Generated by Apple Swift version 5.0.1 (swiftlang-1001.0.82.4 clang-1001.0.46.5)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <Foundation/Foundation.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if __has_attribute(noreturn)
# define SWIFT_NORETURN __attribute__((noreturn))
#else
# define SWIFT_NORETURN
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if defined(__has_attribute) && __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility)
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if __has_feature(attribute_diagnose_if_objc)
# define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
#else
# define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
#endif
#if __has_feature(modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import Foundation;
@import ObjectiveC;
#endif

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="ChatVisitorClient",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif


/// The <code>ZDKAgent</code> model has information about an agent in a chat session,
/// such as their backend <code>id</code>, their display <code>name</code>, their <code>avatar</code>, and if they’re currently typing.
SWIFT_CLASS_NAMED("Agent")
@interface ZDKAgent : NSObject
/// ID associated with the agent
@property (nonatomic, readonly, copy) NSString * _Nonnull id;
/// The display name of the agent
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
/// The URL of the agent’s avatar if it’s present
@property (nonatomic, readonly, copy) NSURL * _Nullable avatar;
/// Whether the agent is currently typing in the chat
@property (nonatomic) BOOL isTyping;
/// Returns a Boolean value that indicates whether the receiver and a given object are equal.
/// \param object the object to compare against
///
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// The <code>ZDKAttachment</code> model, contains information about attachments that were sent or received
/// by the visitor.  underlying attachment sent with as part of the <code>ChatAttachment</code> log.
SWIFT_CLASS_NAMED("Attachment")
@interface ZDKChatAttachment : NSObject
/// Returns a string representing the <code>type</code> of this attachment. Currently this should always be <code>chat.file</code>.
@property (nonatomic, readonly, copy) NSString * _Nonnull type;
/// <code>Name</code> of the attachment
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
/// <code>Mimetype</code> associated with the attachment
@property (nonatomic, readonly, copy) NSString * _Nonnull mimeType;
/// The <code>size</code> of the attachment in kb
@property (nonatomic, readonly) NSInteger size;
/// The <code>url</code> where the attachemt is stored
@property (nonatomic, readonly, copy) NSString * _Nonnull url;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// Base class for chat log events that may occur in a chat session
/// Different LogTypes
/// <ul>
///   <li>
///     <code>ChatMessage</code>, <code>ChatAttachment</code>,  <code>ChatMemberJoin</code>, <code>ChatMemberLeave</code>
///   </li>
/// </ul>
SWIFT_CLASS_NAMED("ChatLog")
@interface ZDKChatLog : NSObject
/// ID
@property (nonatomic, readonly, copy) NSString * _Nonnull id;
/// Identifier associated with the sender. Used to distinguish <code>sender</code>
@property (nonatomic, readonly, copy) NSString * _Nonnull nick;
/// Display Name
@property (nonatomic, readonly, copy) NSString * _Nonnull displayName;
/// Timestamp of when the message was sent
@property (nonatomic, readonly) NSTimeInterval timestamp;
/// A textual representation of this instance.
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
/// Returns a Boolean value that indicates whether the receiver and a given object are equal.
/// \param object the object to compare against
///
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// The Chat Log attachment
SWIFT_CLASS_NAMED("ChatAttachment")
@interface ZDKChatAttachmentMessage : ZDKChatLog
@property (nonatomic, readonly, copy) NSString * _Nonnull message;
@property (nonatomic, readonly, strong) ZDKChatAttachment * _Nonnull attachment;
/// Returns a Boolean value that indicates whether the receiver and a given object are equal.
/// \param object the object to compare against
///
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
@end





/// Chat Member Join event
SWIFT_CLASS_NAMED("ChatMemberJoin")
@interface ZDKChatMemberJoin : ZDKChatLog
/// The channel id which the agent joined.
@property (nonatomic, readonly, copy) NSString * _Nonnull channel;
/// A textual representation of this instance.
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
/// Returns a Boolean value that indicates whether the receiver and a given object are equal.
/// \param object the object to compare against
///
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
@end




@interface ZDKChatMemberJoin (SWIFT_EXTENSION(ChatVisitorClient))
@property (nonatomic, readonly, copy) NSString * _Nonnull debugDescription;
@end


/// Chat Member Leave event
SWIFT_CLASS_NAMED("ChatMemberLeave")
@interface ZDKChatMemberLeave : ZDKChatLog
/// The channel id which the agent left.
@property (nonatomic, readonly, copy) NSString * _Nonnull channel;
/// Returns a Boolean value that indicates whether the receiver and a given object are equal.
/// \param object the object to compare against
///
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
@end




@interface ZDKChatMemberLeave (SWIFT_EXTENSION(ChatVisitorClient))
/// A textual representation of this instance.
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@property (nonatomic, readonly, copy) NSString * _Nonnull debugDescription;
@end


/// Chat message
SWIFT_CLASS_NAMED("ChatMessage")
@interface ZDKChatMessage : ZDKChatLog
/// Message from sender
@property (nonatomic, readonly, copy) NSString * _Nonnull message;
/// Returns a Boolean value that indicates whether the receiver and a given object are equal.
/// \param object the object to compare against
///
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
@end




@interface ZDKChatMessage (SWIFT_EXTENSION(ChatVisitorClient))
/// A textual representation of this instance.
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@property (nonatomic, readonly, copy) NSString * _Nonnull debugDescription;
@end

/// Chat phase describes current state of the session
typedef SWIFT_ENUM(NSInteger, ChatPhase, closed) {
/// Initialisation phase.
/// Chat hasn’t started yet
  ChatPhaseInitialising = 0,
  ChatPhaseConfiguring = 1,
/// Chat is ready to send & receive messages
  ChatPhaseActive = 2,
/// Chat session has ended
  ChatPhaseEnded = 3,
};

@class ZDKQueuePosition;

/// <code>ZDKChatState</code> is a model representation of the current chat session.
/// Can gather information about the <code>agents</code> in the session, the visitor’s <code>queuePosition</code>,
/// what <code>phase</code> the chat is in, and the list of <code>logs</code> in the session
SWIFT_CLASS_NAMED("ChatState")
@interface ZDKChatState : NSObject
/// Empty chat state
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) ZDKChatState * _Nonnull empty;)
+ (ZDKChatState * _Nonnull)empty SWIFT_WARN_UNUSED_RESULT;
/// <code>[Agent]</code> assigned to the channel
@property (nonatomic, readonly, copy) NSArray<ZDKAgent *> * _Nonnull agents;
/// Whether the chat session is active. If <code>false</code> then the chat has ended.
@property (nonatomic, readonly) BOOL isChatting;
/// Array of ChatLogs that have occured in the chat. eg. Member join/leave, attachments
@property (nonatomic, readonly, copy) NSArray<ZDKChatLog *> * _Nonnull logs;
/// Queue position
@property (nonatomic, readonly, strong) ZDKQueuePosition * _Nonnull queuePosition;
/// The phase of the current chat session.
@property (nonatomic, readonly) enum ChatPhase chatPhase;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

/// Represents different states of the<code>ChatSession</code>
typedef SWIFT_ENUM_NAMED(NSInteger, ZDKConnectionState, "ConnectionState", closed) {
/// Indicating the client is trying to connect to the backend.
  ZDKConnectionStateConnecting = 0,
/// The <code>ChatSession</code> has connected to the backend and is ready to send/receive messages.
  ZDKConnectionStateConnected = 1,
/// The <code>ChatSession</code> has disconnected. Can be caused by network connection, or a user ending
/// the session with <code>ChatSession.disconnect()</code>
  ZDKConnectionStateDisconnected = 2,
/// The <code>ChatSession</code> is trying to reconnect to a chat that was already in session.
  ZDKConnectionStateReconnecting = 3,
/// Failed to reconnect to the web-socket
  ZDKConnectionStateFailed = 4,
};


/// Department model contains id associated with the department,
/// the department name, and the current status of the department.
SWIFT_CLASS_NAMED("Department")
@interface ZDKDepartment : NSObject
/// ID associated with the department
@property (nonatomic, readonly, copy) NSString * _Nonnull id;
/// Department name
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
@property (nonatomic, readonly, copy) NSString * _Nonnull ZDKStatus;
/// Returns a Boolean value that indicates whether the receiver and a given object are equal.
/// \param object the object to compare against
///
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


@interface ZDKDepartment (SWIFT_EXTENSION(ChatVisitorClient))
/// A textual representation of this instance.
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@property (nonatomic, readonly, copy) NSString * _Nonnull debugDescription;
@end


/// Unsubscribe from observers
SWIFT_CLASS_NAMED("ObservationToken")
@interface ZDKObservationToken : NSObject
- (void)cancel;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// <code>ZDKQueuePosition</code> is a model that represents the current queue position of the visitor.
SWIFT_CLASS_NAMED("QueuePosition")
@interface ZDKQueuePosition : NSObject
/// An <code>id</code> that is used to help handle updates to the queue position in the UI layer.
@property (nonatomic, readonly, copy) NSString * _Nonnull id;
/// The visitors’ current position in the queue.
@property (nonatomic) NSInteger queue;
/// Returns a Boolean value that indicates whether the receiver and a given object are equal.
/// \param object the object to compare against
///
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// Visitor information that can be seen in the Chat dashboard
/// Contains <code>name</code>, <code>email</code>, and <code>phoneNumber</code>
/// note:
/// <code>email</code> is parsed and should be in correct email format. <code>phoneNumber</code> is not parsed.
SWIFT_CLASS_NAMED("VisitorInfo")
@interface ZDKVisitorInfo : NSObject
/// Name
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
/// E-mail
@property (nonatomic, readonly, copy) NSString * _Nonnull email;
/// Phone number
@property (nonatomic, readonly, copy) NSString * _Nonnull phoneNumber;
/// Initializer to update the visitor’s information.
/// \param name Name
///
/// \param email E-mail
///
/// \param phoneNumber Phone number
///
- (nonnull instancetype)initWithName:(NSString * _Nonnull)name email:(NSString * _Nonnull)email phoneNumber:(NSString * _Nonnull)phoneNumber OBJC_DESIGNATED_INITIALIZER;
/// Returns a Boolean value that indicates whether the receiver and a given object are equal.
/// \param object the object to compare against
///
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// A Custom Update Event that can be seen in the agent dashboard.
/// The <code>VisitorPath</code> API is a way to know if visitors have performed certain events in your app.
/// <code>VisitorPath</code> events can be queued before a chat has started,
/// and they’ll be sent when the first message is sent.
/// note:
/// The <code>url</code> field is unparsed by the backend, so it can be any <code>String</code>.
/// If subsequent <code>url</code>s are the same, only the initial <code>VisitorPath</code> update will be sent.
/// If <code>url</code> parameter of <code>VisitorPath</code> is not specified, an <code>ISO8601</code> timestamp will be sent.
SWIFT_CLASS_NAMED("VisitorPath")
@interface ZDKVisitorPath : NSObject
/// Custom event
@property (nonatomic, readonly, copy) NSString * _Nonnull event;
/// Optional url string. <code>ISO8601</code> timestamp by default.
@property (nonatomic, readonly, copy) NSString * _Nonnull url;
/// Initializer for <code>VisitorPath</code> updates
/// \param event The user-event
///
/// \param url Another string associated with the event.
///
- (nonnull instancetype)initWithEvent:(NSString * _Nonnull)event url:(NSString * _Nonnull)url OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


@interface ZDKVisitorPath (SWIFT_EXTENSION(ChatVisitorClient))
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
@end

#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#pragma clang diagnostic pop

#endif
#else
#if 0
#elif defined(__arm64__) && __arm64__
// Generated by Apple Swift version 5.0.1 (swiftlang-1001.0.82.4 clang-1001.0.46.5)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <Foundation/Foundation.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if __has_attribute(noreturn)
# define SWIFT_NORETURN __attribute__((noreturn))
#else
# define SWIFT_NORETURN
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if defined(__has_attribute) && __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility)
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if __has_feature(attribute_diagnose_if_objc)
# define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
#else
# define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
#endif
#if __has_feature(modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import Foundation;
@import ObjectiveC;
#endif

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="ChatVisitorClient",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif


/// The <code>ZDKAgent</code> model has information about an agent in a chat session,
/// such as their backend <code>id</code>, their display <code>name</code>, their <code>avatar</code>, and if they’re currently typing.
SWIFT_CLASS_NAMED("Agent")
@interface ZDKAgent : NSObject
/// ID associated with the agent
@property (nonatomic, readonly, copy) NSString * _Nonnull id;
/// The display name of the agent
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
/// The URL of the agent’s avatar if it’s present
@property (nonatomic, readonly, copy) NSURL * _Nullable avatar;
/// Whether the agent is currently typing in the chat
@property (nonatomic) BOOL isTyping;
/// Returns a Boolean value that indicates whether the receiver and a given object are equal.
/// \param object the object to compare against
///
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// The <code>ZDKAttachment</code> model, contains information about attachments that were sent or received
/// by the visitor.  underlying attachment sent with as part of the <code>ChatAttachment</code> log.
SWIFT_CLASS_NAMED("Attachment")
@interface ZDKChatAttachment : NSObject
/// Returns a string representing the <code>type</code> of this attachment. Currently this should always be <code>chat.file</code>.
@property (nonatomic, readonly, copy) NSString * _Nonnull type;
/// <code>Name</code> of the attachment
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
/// <code>Mimetype</code> associated with the attachment
@property (nonatomic, readonly, copy) NSString * _Nonnull mimeType;
/// The <code>size</code> of the attachment in kb
@property (nonatomic, readonly) NSInteger size;
/// The <code>url</code> where the attachemt is stored
@property (nonatomic, readonly, copy) NSString * _Nonnull url;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// Base class for chat log events that may occur in a chat session
/// Different LogTypes
/// <ul>
///   <li>
///     <code>ChatMessage</code>, <code>ChatAttachment</code>,  <code>ChatMemberJoin</code>, <code>ChatMemberLeave</code>
///   </li>
/// </ul>
SWIFT_CLASS_NAMED("ChatLog")
@interface ZDKChatLog : NSObject
/// ID
@property (nonatomic, readonly, copy) NSString * _Nonnull id;
/// Identifier associated with the sender. Used to distinguish <code>sender</code>
@property (nonatomic, readonly, copy) NSString * _Nonnull nick;
/// Display Name
@property (nonatomic, readonly, copy) NSString * _Nonnull displayName;
/// Timestamp of when the message was sent
@property (nonatomic, readonly) NSTimeInterval timestamp;
/// A textual representation of this instance.
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
/// Returns a Boolean value that indicates whether the receiver and a given object are equal.
/// \param object the object to compare against
///
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// The Chat Log attachment
SWIFT_CLASS_NAMED("ChatAttachment")
@interface ZDKChatAttachmentMessage : ZDKChatLog
@property (nonatomic, readonly, copy) NSString * _Nonnull message;
@property (nonatomic, readonly, strong) ZDKChatAttachment * _Nonnull attachment;
/// Returns a Boolean value that indicates whether the receiver and a given object are equal.
/// \param object the object to compare against
///
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
@end





/// Chat Member Join event
SWIFT_CLASS_NAMED("ChatMemberJoin")
@interface ZDKChatMemberJoin : ZDKChatLog
/// The channel id which the agent joined.
@property (nonatomic, readonly, copy) NSString * _Nonnull channel;
/// A textual representation of this instance.
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
/// Returns a Boolean value that indicates whether the receiver and a given object are equal.
/// \param object the object to compare against
///
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
@end




@interface ZDKChatMemberJoin (SWIFT_EXTENSION(ChatVisitorClient))
@property (nonatomic, readonly, copy) NSString * _Nonnull debugDescription;
@end


/// Chat Member Leave event
SWIFT_CLASS_NAMED("ChatMemberLeave")
@interface ZDKChatMemberLeave : ZDKChatLog
/// The channel id which the agent left.
@property (nonatomic, readonly, copy) NSString * _Nonnull channel;
/// Returns a Boolean value that indicates whether the receiver and a given object are equal.
/// \param object the object to compare against
///
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
@end




@interface ZDKChatMemberLeave (SWIFT_EXTENSION(ChatVisitorClient))
/// A textual representation of this instance.
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@property (nonatomic, readonly, copy) NSString * _Nonnull debugDescription;
@end


/// Chat message
SWIFT_CLASS_NAMED("ChatMessage")
@interface ZDKChatMessage : ZDKChatLog
/// Message from sender
@property (nonatomic, readonly, copy) NSString * _Nonnull message;
/// Returns a Boolean value that indicates whether the receiver and a given object are equal.
/// \param object the object to compare against
///
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
@end




@interface ZDKChatMessage (SWIFT_EXTENSION(ChatVisitorClient))
/// A textual representation of this instance.
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@property (nonatomic, readonly, copy) NSString * _Nonnull debugDescription;
@end

/// Chat phase describes current state of the session
typedef SWIFT_ENUM(NSInteger, ChatPhase, closed) {
/// Initialisation phase.
/// Chat hasn’t started yet
  ChatPhaseInitialising = 0,
  ChatPhaseConfiguring = 1,
/// Chat is ready to send & receive messages
  ChatPhaseActive = 2,
/// Chat session has ended
  ChatPhaseEnded = 3,
};

@class ZDKQueuePosition;

/// <code>ZDKChatState</code> is a model representation of the current chat session.
/// Can gather information about the <code>agents</code> in the session, the visitor’s <code>queuePosition</code>,
/// what <code>phase</code> the chat is in, and the list of <code>logs</code> in the session
SWIFT_CLASS_NAMED("ChatState")
@interface ZDKChatState : NSObject
/// Empty chat state
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) ZDKChatState * _Nonnull empty;)
+ (ZDKChatState * _Nonnull)empty SWIFT_WARN_UNUSED_RESULT;
/// <code>[Agent]</code> assigned to the channel
@property (nonatomic, readonly, copy) NSArray<ZDKAgent *> * _Nonnull agents;
/// Whether the chat session is active. If <code>false</code> then the chat has ended.
@property (nonatomic, readonly) BOOL isChatting;
/// Array of ChatLogs that have occured in the chat. eg. Member join/leave, attachments
@property (nonatomic, readonly, copy) NSArray<ZDKChatLog *> * _Nonnull logs;
/// Queue position
@property (nonatomic, readonly, strong) ZDKQueuePosition * _Nonnull queuePosition;
/// The phase of the current chat session.
@property (nonatomic, readonly) enum ChatPhase chatPhase;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

/// Represents different states of the<code>ChatSession</code>
typedef SWIFT_ENUM_NAMED(NSInteger, ZDKConnectionState, "ConnectionState", closed) {
/// Indicating the client is trying to connect to the backend.
  ZDKConnectionStateConnecting = 0,
/// The <code>ChatSession</code> has connected to the backend and is ready to send/receive messages.
  ZDKConnectionStateConnected = 1,
/// The <code>ChatSession</code> has disconnected. Can be caused by network connection, or a user ending
/// the session with <code>ChatSession.disconnect()</code>
  ZDKConnectionStateDisconnected = 2,
/// The <code>ChatSession</code> is trying to reconnect to a chat that was already in session.
  ZDKConnectionStateReconnecting = 3,
/// Failed to reconnect to the web-socket
  ZDKConnectionStateFailed = 4,
};


/// Department model contains id associated with the department,
/// the department name, and the current status of the department.
SWIFT_CLASS_NAMED("Department")
@interface ZDKDepartment : NSObject
/// ID associated with the department
@property (nonatomic, readonly, copy) NSString * _Nonnull id;
/// Department name
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
@property (nonatomic, readonly, copy) NSString * _Nonnull ZDKStatus;
/// Returns a Boolean value that indicates whether the receiver and a given object are equal.
/// \param object the object to compare against
///
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


@interface ZDKDepartment (SWIFT_EXTENSION(ChatVisitorClient))
/// A textual representation of this instance.
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@property (nonatomic, readonly, copy) NSString * _Nonnull debugDescription;
@end


/// Unsubscribe from observers
SWIFT_CLASS_NAMED("ObservationToken")
@interface ZDKObservationToken : NSObject
- (void)cancel;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// <code>ZDKQueuePosition</code> is a model that represents the current queue position of the visitor.
SWIFT_CLASS_NAMED("QueuePosition")
@interface ZDKQueuePosition : NSObject
/// An <code>id</code> that is used to help handle updates to the queue position in the UI layer.
@property (nonatomic, readonly, copy) NSString * _Nonnull id;
/// The visitors’ current position in the queue.
@property (nonatomic) NSInteger queue;
/// Returns a Boolean value that indicates whether the receiver and a given object are equal.
/// \param object the object to compare against
///
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// Visitor information that can be seen in the Chat dashboard
/// Contains <code>name</code>, <code>email</code>, and <code>phoneNumber</code>
/// note:
/// <code>email</code> is parsed and should be in correct email format. <code>phoneNumber</code> is not parsed.
SWIFT_CLASS_NAMED("VisitorInfo")
@interface ZDKVisitorInfo : NSObject
/// Name
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
/// E-mail
@property (nonatomic, readonly, copy) NSString * _Nonnull email;
/// Phone number
@property (nonatomic, readonly, copy) NSString * _Nonnull phoneNumber;
/// Initializer to update the visitor’s information.
/// \param name Name
///
/// \param email E-mail
///
/// \param phoneNumber Phone number
///
- (nonnull instancetype)initWithName:(NSString * _Nonnull)name email:(NSString * _Nonnull)email phoneNumber:(NSString * _Nonnull)phoneNumber OBJC_DESIGNATED_INITIALIZER;
/// Returns a Boolean value that indicates whether the receiver and a given object are equal.
/// \param object the object to compare against
///
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// A Custom Update Event that can be seen in the agent dashboard.
/// The <code>VisitorPath</code> API is a way to know if visitors have performed certain events in your app.
/// <code>VisitorPath</code> events can be queued before a chat has started,
/// and they’ll be sent when the first message is sent.
/// note:
/// The <code>url</code> field is unparsed by the backend, so it can be any <code>String</code>.
/// If subsequent <code>url</code>s are the same, only the initial <code>VisitorPath</code> update will be sent.
/// If <code>url</code> parameter of <code>VisitorPath</code> is not specified, an <code>ISO8601</code> timestamp will be sent.
SWIFT_CLASS_NAMED("VisitorPath")
@interface ZDKVisitorPath : NSObject
/// Custom event
@property (nonatomic, readonly, copy) NSString * _Nonnull event;
/// Optional url string. <code>ISO8601</code> timestamp by default.
@property (nonatomic, readonly, copy) NSString * _Nonnull url;
/// Initializer for <code>VisitorPath</code> updates
/// \param event The user-event
///
/// \param url Another string associated with the event.
///
- (nonnull instancetype)initWithEvent:(NSString * _Nonnull)event url:(NSString * _Nonnull)url OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


@interface ZDKVisitorPath (SWIFT_EXTENSION(ChatVisitorClient))
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
@end

#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#pragma clang diagnostic pop

#elif defined(__ARM_ARCH_7A__) && __ARM_ARCH_7A__
// Generated by Apple Swift version 5.0.1 (swiftlang-1001.0.82.4 clang-1001.0.46.5)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <Foundation/Foundation.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if __has_attribute(noreturn)
# define SWIFT_NORETURN __attribute__((noreturn))
#else
# define SWIFT_NORETURN
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if defined(__has_attribute) && __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility)
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if __has_feature(attribute_diagnose_if_objc)
# define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
#else
# define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
#endif
#if __has_feature(modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import Foundation;
@import ObjectiveC;
#endif

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="ChatVisitorClient",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif


/// The <code>ZDKAgent</code> model has information about an agent in a chat session,
/// such as their backend <code>id</code>, their display <code>name</code>, their <code>avatar</code>, and if they’re currently typing.
SWIFT_CLASS_NAMED("Agent")
@interface ZDKAgent : NSObject
/// ID associated with the agent
@property (nonatomic, readonly, copy) NSString * _Nonnull id;
/// The display name of the agent
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
/// The URL of the agent’s avatar if it’s present
@property (nonatomic, readonly, copy) NSURL * _Nullable avatar;
/// Whether the agent is currently typing in the chat
@property (nonatomic) BOOL isTyping;
/// Returns a Boolean value that indicates whether the receiver and a given object are equal.
/// \param object the object to compare against
///
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// The <code>ZDKAttachment</code> model, contains information about attachments that were sent or received
/// by the visitor.  underlying attachment sent with as part of the <code>ChatAttachment</code> log.
SWIFT_CLASS_NAMED("Attachment")
@interface ZDKChatAttachment : NSObject
/// Returns a string representing the <code>type</code> of this attachment. Currently this should always be <code>chat.file</code>.
@property (nonatomic, readonly, copy) NSString * _Nonnull type;
/// <code>Name</code> of the attachment
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
/// <code>Mimetype</code> associated with the attachment
@property (nonatomic, readonly, copy) NSString * _Nonnull mimeType;
/// The <code>size</code> of the attachment in kb
@property (nonatomic, readonly) NSInteger size;
/// The <code>url</code> where the attachemt is stored
@property (nonatomic, readonly, copy) NSString * _Nonnull url;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// Base class for chat log events that may occur in a chat session
/// Different LogTypes
/// <ul>
///   <li>
///     <code>ChatMessage</code>, <code>ChatAttachment</code>,  <code>ChatMemberJoin</code>, <code>ChatMemberLeave</code>
///   </li>
/// </ul>
SWIFT_CLASS_NAMED("ChatLog")
@interface ZDKChatLog : NSObject
/// ID
@property (nonatomic, readonly, copy) NSString * _Nonnull id;
/// Identifier associated with the sender. Used to distinguish <code>sender</code>
@property (nonatomic, readonly, copy) NSString * _Nonnull nick;
/// Display Name
@property (nonatomic, readonly, copy) NSString * _Nonnull displayName;
/// Timestamp of when the message was sent
@property (nonatomic, readonly) NSTimeInterval timestamp;
/// A textual representation of this instance.
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
/// Returns a Boolean value that indicates whether the receiver and a given object are equal.
/// \param object the object to compare against
///
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// The Chat Log attachment
SWIFT_CLASS_NAMED("ChatAttachment")
@interface ZDKChatAttachmentMessage : ZDKChatLog
@property (nonatomic, readonly, copy) NSString * _Nonnull message;
@property (nonatomic, readonly, strong) ZDKChatAttachment * _Nonnull attachment;
/// Returns a Boolean value that indicates whether the receiver and a given object are equal.
/// \param object the object to compare against
///
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
@end





/// Chat Member Join event
SWIFT_CLASS_NAMED("ChatMemberJoin")
@interface ZDKChatMemberJoin : ZDKChatLog
/// The channel id which the agent joined.
@property (nonatomic, readonly, copy) NSString * _Nonnull channel;
/// A textual representation of this instance.
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
/// Returns a Boolean value that indicates whether the receiver and a given object are equal.
/// \param object the object to compare against
///
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
@end




@interface ZDKChatMemberJoin (SWIFT_EXTENSION(ChatVisitorClient))
@property (nonatomic, readonly, copy) NSString * _Nonnull debugDescription;
@end


/// Chat Member Leave event
SWIFT_CLASS_NAMED("ChatMemberLeave")
@interface ZDKChatMemberLeave : ZDKChatLog
/// The channel id which the agent left.
@property (nonatomic, readonly, copy) NSString * _Nonnull channel;
/// Returns a Boolean value that indicates whether the receiver and a given object are equal.
/// \param object the object to compare against
///
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
@end




@interface ZDKChatMemberLeave (SWIFT_EXTENSION(ChatVisitorClient))
/// A textual representation of this instance.
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@property (nonatomic, readonly, copy) NSString * _Nonnull debugDescription;
@end


/// Chat message
SWIFT_CLASS_NAMED("ChatMessage")
@interface ZDKChatMessage : ZDKChatLog
/// Message from sender
@property (nonatomic, readonly, copy) NSString * _Nonnull message;
/// Returns a Boolean value that indicates whether the receiver and a given object are equal.
/// \param object the object to compare against
///
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
@end




@interface ZDKChatMessage (SWIFT_EXTENSION(ChatVisitorClient))
/// A textual representation of this instance.
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@property (nonatomic, readonly, copy) NSString * _Nonnull debugDescription;
@end

/// Chat phase describes current state of the session
typedef SWIFT_ENUM(NSInteger, ChatPhase, closed) {
/// Initialisation phase.
/// Chat hasn’t started yet
  ChatPhaseInitialising = 0,
  ChatPhaseConfiguring = 1,
/// Chat is ready to send & receive messages
  ChatPhaseActive = 2,
/// Chat session has ended
  ChatPhaseEnded = 3,
};

@class ZDKQueuePosition;

/// <code>ZDKChatState</code> is a model representation of the current chat session.
/// Can gather information about the <code>agents</code> in the session, the visitor’s <code>queuePosition</code>,
/// what <code>phase</code> the chat is in, and the list of <code>logs</code> in the session
SWIFT_CLASS_NAMED("ChatState")
@interface ZDKChatState : NSObject
/// Empty chat state
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) ZDKChatState * _Nonnull empty;)
+ (ZDKChatState * _Nonnull)empty SWIFT_WARN_UNUSED_RESULT;
/// <code>[Agent]</code> assigned to the channel
@property (nonatomic, readonly, copy) NSArray<ZDKAgent *> * _Nonnull agents;
/// Whether the chat session is active. If <code>false</code> then the chat has ended.
@property (nonatomic, readonly) BOOL isChatting;
/// Array of ChatLogs that have occured in the chat. eg. Member join/leave, attachments
@property (nonatomic, readonly, copy) NSArray<ZDKChatLog *> * _Nonnull logs;
/// Queue position
@property (nonatomic, readonly, strong) ZDKQueuePosition * _Nonnull queuePosition;
/// The phase of the current chat session.
@property (nonatomic, readonly) enum ChatPhase chatPhase;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

/// Represents different states of the<code>ChatSession</code>
typedef SWIFT_ENUM_NAMED(NSInteger, ZDKConnectionState, "ConnectionState", closed) {
/// Indicating the client is trying to connect to the backend.
  ZDKConnectionStateConnecting = 0,
/// The <code>ChatSession</code> has connected to the backend and is ready to send/receive messages.
  ZDKConnectionStateConnected = 1,
/// The <code>ChatSession</code> has disconnected. Can be caused by network connection, or a user ending
/// the session with <code>ChatSession.disconnect()</code>
  ZDKConnectionStateDisconnected = 2,
/// The <code>ChatSession</code> is trying to reconnect to a chat that was already in session.
  ZDKConnectionStateReconnecting = 3,
/// Failed to reconnect to the web-socket
  ZDKConnectionStateFailed = 4,
};


/// Department model contains id associated with the department,
/// the department name, and the current status of the department.
SWIFT_CLASS_NAMED("Department")
@interface ZDKDepartment : NSObject
/// ID associated with the department
@property (nonatomic, readonly, copy) NSString * _Nonnull id;
/// Department name
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
@property (nonatomic, readonly, copy) NSString * _Nonnull ZDKStatus;
/// Returns a Boolean value that indicates whether the receiver and a given object are equal.
/// \param object the object to compare against
///
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


@interface ZDKDepartment (SWIFT_EXTENSION(ChatVisitorClient))
/// A textual representation of this instance.
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@property (nonatomic, readonly, copy) NSString * _Nonnull debugDescription;
@end


/// Unsubscribe from observers
SWIFT_CLASS_NAMED("ObservationToken")
@interface ZDKObservationToken : NSObject
- (void)cancel;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// <code>ZDKQueuePosition</code> is a model that represents the current queue position of the visitor.
SWIFT_CLASS_NAMED("QueuePosition")
@interface ZDKQueuePosition : NSObject
/// An <code>id</code> that is used to help handle updates to the queue position in the UI layer.
@property (nonatomic, readonly, copy) NSString * _Nonnull id;
/// The visitors’ current position in the queue.
@property (nonatomic) NSInteger queue;
/// Returns a Boolean value that indicates whether the receiver and a given object are equal.
/// \param object the object to compare against
///
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// Visitor information that can be seen in the Chat dashboard
/// Contains <code>name</code>, <code>email</code>, and <code>phoneNumber</code>
/// note:
/// <code>email</code> is parsed and should be in correct email format. <code>phoneNumber</code> is not parsed.
SWIFT_CLASS_NAMED("VisitorInfo")
@interface ZDKVisitorInfo : NSObject
/// Name
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
/// E-mail
@property (nonatomic, readonly, copy) NSString * _Nonnull email;
/// Phone number
@property (nonatomic, readonly, copy) NSString * _Nonnull phoneNumber;
/// Initializer to update the visitor’s information.
/// \param name Name
///
/// \param email E-mail
///
/// \param phoneNumber Phone number
///
- (nonnull instancetype)initWithName:(NSString * _Nonnull)name email:(NSString * _Nonnull)email phoneNumber:(NSString * _Nonnull)phoneNumber OBJC_DESIGNATED_INITIALIZER;
/// Returns a Boolean value that indicates whether the receiver and a given object are equal.
/// \param object the object to compare against
///
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// A Custom Update Event that can be seen in the agent dashboard.
/// The <code>VisitorPath</code> API is a way to know if visitors have performed certain events in your app.
/// <code>VisitorPath</code> events can be queued before a chat has started,
/// and they’ll be sent when the first message is sent.
/// note:
/// The <code>url</code> field is unparsed by the backend, so it can be any <code>String</code>.
/// If subsequent <code>url</code>s are the same, only the initial <code>VisitorPath</code> update will be sent.
/// If <code>url</code> parameter of <code>VisitorPath</code> is not specified, an <code>ISO8601</code> timestamp will be sent.
SWIFT_CLASS_NAMED("VisitorPath")
@interface ZDKVisitorPath : NSObject
/// Custom event
@property (nonatomic, readonly, copy) NSString * _Nonnull event;
/// Optional url string. <code>ISO8601</code> timestamp by default.
@property (nonatomic, readonly, copy) NSString * _Nonnull url;
/// Initializer for <code>VisitorPath</code> updates
/// \param event The user-event
///
/// \param url Another string associated with the event.
///
- (nonnull instancetype)initWithEvent:(NSString * _Nonnull)event url:(NSString * _Nonnull)url OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


@interface ZDKVisitorPath (SWIFT_EXTENSION(ChatVisitorClient))
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
@end

#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#pragma clang diagnostic pop

#endif
#endif
