
#if TARGET_OS_SIMULATOR
#if 0
#elif defined(__x86_64__) && __x86_64__
// Generated by Apple Swift version 5.0.1 (swiftlang-1001.0.82.4 clang-1001.0.46.5)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <Foundation/Foundation.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if __has_attribute(noreturn)
# define SWIFT_NORETURN __attribute__((noreturn))
#else
# define SWIFT_NORETURN
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if defined(__has_attribute) && __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility)
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if __has_feature(attribute_diagnose_if_objc)
# define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
#else
# define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
#endif
#if __has_feature(modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import ChatVisitorClient;
@import Dispatch;
@import Foundation;
@import ObjectiveC;
#endif

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="ChatProvidersSDK",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif

@class ZDKChatProviders;
@class ZDKChatAPIConfig;
@class ZDKConnectionProvider;
@class ZDKProfileProvider;
@class ZDKPushNotificationsProvider;
@class ZDKChatProvider;

/// <code>Chat</code> is a singleton class of the <code>ChatProviderSDK</code>.
/// It needs to be intialized with an <code>accountKey</code> before using any of the Chat APIs.
/// The <code>accountKey</code> can be retrieved from the Zendesk Chat dashboard.
/// \code
/// Chat.initialize(accountKey: accountKey)
///
/// \endcode
SWIFT_CLASS_NAMED("Chat")
@interface ZDKChat : NSObject
/// Chat message received PushNotification name
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSNotificationName _Nonnull NotificationMessageReceived;)
+ (NSNotificationName _Nonnull)NotificationMessageReceived SWIFT_WARN_UNUSED_RESULT;
/// Chat ended PushNotification name
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSNotificationName _Nonnull NotificationChatEnded;)
+ (NSNotificationName _Nonnull)NotificationChatEnded SWIFT_WARN_UNUSED_RESULT;
/// Account key
@property (nonatomic, readonly, copy) NSString * _Nonnull accountKey;
/// Grouping of Zendesk Chat’s providers
@property (nonatomic, readonly, strong) ZDKChatProviders * _Nonnull providers;
/// Static instance of the Chat provider
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) ZDKChat * _Nullable instance;)
+ (ZDKChat * _Nullable)instance SWIFT_WARN_UNUSED_RESULT;
/// Initializes chat with Chat’s accountkey
/// \param accountKey The accountKey from your chat instance
///
/// \param config Chat API configs
///
/// \param queue the queue to dispatch chat operations on. Default is <code>.main</code>
///
+ (void)initializeWithAccountKey:(NSString * _Nonnull)accountKey config:(ZDKChatAPIConfig * _Nullable)config queue:(dispatch_queue_t _Nonnull)queue;
/// Connection Provider
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) ZDKConnectionProvider * _Nullable connectionProvider;)
+ (ZDKConnectionProvider * _Nullable)connectionProvider SWIFT_WARN_UNUSED_RESULT;
/// Profile Provider
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) ZDKProfileProvider * _Nullable profileProvider;)
+ (ZDKProfileProvider * _Nullable)profileProvider SWIFT_WARN_UNUSED_RESULT;
/// Push Notifications Provider
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) ZDKPushNotificationsProvider * _Nullable pushNotificationsProvider;)
+ (ZDKPushNotificationsProvider * _Nullable)pushNotificationsProvider SWIFT_WARN_UNUSED_RESULT;
/// Chat Provider
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) ZDKChatProvider * _Nullable chatProvider;)
+ (ZDKChatProvider * _Nullable)chatProvider SWIFT_WARN_UNUSED_RESULT;
/// Connection Provider
@property (nonatomic, readonly, strong) ZDKConnectionProvider * _Nonnull connectionProvider;
/// Push Notifications Provider
@property (nonatomic, readonly, strong) ZDKPushNotificationsProvider * _Nonnull pushNotificationsProvider;
/// Profile Provider
@property (nonatomic, readonly, strong) ZDKProfileProvider * _Nonnull profileProvider;
/// Chat Provider
@property (nonatomic, readonly, strong) ZDKChatProvider * _Nonnull chatProvider;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class UIApplication;

@interface ZDKChat (SWIFT_EXTENSION(ChatProvidersSDK))
/// Sends push token to server
/// \param pushTokenData device token received in <code>didRegisterForRemoteNotificationsWithDeviceToken</code> after registration
///
+ (void)registerPushToken:(NSData * _Nonnull)pushTokenData;
/// Pass the received remote notification to <code>didReceiveRemoteNotification</code>.
/// If the push notification belongs to Zendesk Chat, the push notification will be processed accordingly
/// There are currently two types of supported Push Notifications:
/// <ul>
///   <li>
///     <code>New chat message</code>
///     <ul>
///       <li>
///         This event happens, when there’s new message typed by an agent.
///         In order to respond to this event, you can observe the notification with name
///         <code>PushNotificationsProvider.ChatMessageReceivedNotification</code> in <code>NotificationCenter</code>.
///       </li>
///     </ul>
///   </li>
///   <li>
///     <code>Chat has ended</code>
///     <ul>
///       <li>
///         When this event is received, the Chat will be ended and the chat session will be disconnected
///         In order to respond to this event, you can observe the notification with name
///         <code>Chat.NotificationChatEnded</code> in <code>NotificationCenter</code>.
///       </li>
///     </ul>
///   </li>
/// </ul>
/// \param userInfo A dictionary that contains information related to the remote notification
///
/// \param application The centralized point of control and coordination for apps running in iOS.
///
+ (void)didReceiveRemoteNotification:(NSDictionary * _Nonnull)userInfo in:(UIApplication * _Nonnull)application;
@end

@class ZDKVisitorInfo;

/// A set of configurations that are associated with each chat session.
/// <h2>Default values</h2>
/// \code
/// visitorPathOne = "" // results to "Direct Path"
/// visitorPathTwo = "Zendesk Chat SDK v\(VersionNumber)"
/// visitorPathTwoURL = Date().iso8601
/// tags = []
/// department = nil
/// visitorInfo = nil
///
/// \endcode
SWIFT_CLASS_NAMED("ChatAPIConfig")
@interface ZDKChatAPIConfig : NSObject
/// This string will be placed in the first line of the visitor path.
/// Defaults to “Direct Path” if not specified.
@property (nonatomic, copy) NSString * _Nonnull visitorPathOne;
/// This string will be placed in the second line of the visitor path.
/// Defaults to “Zendesk Chat SDK v(ChatProvidersSDKVersionNumber)”
@property (nonatomic, copy) NSString * _Nonnull visitorPathTwo;
/// This string can be found when hovering over the second line of the visitor path.
/// Default to ISO8601 timestamp.
@property (nonatomic, copy) NSString * _Nonnull visitorPathTwoURL;
/// The tags to be set when a chat starts.
@property (nonatomic, copy) NSArray<NSString *> * _Nonnull tags;
/// The department to be set when a chat starts.
/// default is <code>nil</code>
@property (nonatomic, copy) NSString * _Nullable department;
/// Set the visitor info.
/// Default is <code>nil</code>. Pass through fields as empty strings to clear info.
@property (nonatomic, strong) ZDKVisitorInfo * _Nullable visitorInfo;
/// Default initializer
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

/// Potential errors returned from the ChatProviderSDK
/// <ul>
///   <li>
///     <code>chatIsNotInitialized</code>
///     Will be thrown if the Chat instance isn’t initialized before initializing <code>ChatUI</code>
///   </li>
///   <li>
///     <code>disconnected</code>
///     Will be emitted when a request is attempted to be sent, but the connection state is disconnected.
///   </li>
/// </ul>
typedef SWIFT_ENUM(NSInteger, ChatError, closed) {
/// Chat was not initialized
  ChatErrorChatIsNotInitialized = 0,
/// Chat is disconnected
  ChatErrorDisconnected = 1,
};
static NSString * _Nonnull const ChatErrorDomain = @"ChatProvidersSDK.ChatError";

@class ZDKChatState;
@class ZDKObservationToken;

/// The <code>ZDKChatProvider</code> provides APIs to interact and observe the current Chat session.
/// It provides APIs to:
/// <ul>
///   <li>
///     proactively request a chat
///   </li>
///   <li>
///     send messages
///   </li>
///   <li>
///     handle failed messages (retry/delete)
///   </li>
///   <li>
///     set the visitors’ typing indicator
///   </li>
///   <li>
///     end the chat
///   </li>
/// </ul>
SWIFT_CLASS_NAMED("ChatProvider")
@interface ZDKChatProvider : NSObject
/// Proactively lets an agent know that the user wants to chat.
- (void)requestChat;
/// Let’s the agent know when the visitor is typing.
/// If <code>true</code>, the visitor typing indicator will appear in agent dashboard, else it will be hidden.
/// \param isTyping isTyping
///
- (void)setTypingWithIsTyping:(BOOL)isTyping;
/// Observe changes of the current chat’s state
/// The conversation thread can be accessed through the <code>logs</code>
/// \param callback block that executes everytime there is an update to the <code>ChatState</code>
///
///
/// returns:
/// An <code>ObservationToken</code> that can cancel the subscription  to the <code>ChatState</code>.
- (ZDKObservationToken * _Nullable)observeChatState:(void (^ _Nonnull)(ZDKChatState * _Nonnull))callback SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


@interface ZDKChatProvider (SWIFT_EXTENSION(ChatProvidersSDK))
- (void)sendMessage:(NSString * _Nonnull)message completion:(void (^ _Nullable)(NSString * _Nullable, NSError * _Nullable))completion;
- (void)resendFailedMessageWithId:(NSString * _Nonnull)id completion:(void (^ _Nullable)(NSString * _Nullable, NSError * _Nullable))completion;
- (void)deleteFailedMessageWithId:(NSString * _Nonnull)id completion:(void (^ _Nullable)(NSString * _Nullable, NSError * _Nullable))completion;
- (void)endChat:(void (^ _Nullable)(BOOL, NSError * _Nullable))completion;
@end


/// <code>ZDKConnectionProvider</code> gives the ability to observe connection updates.
SWIFT_CLASS_NAMED("ConnectionProvider")
@interface ZDKConnectionProvider : NSObject
/// The current state of the Connection
@property (nonatomic, readonly) enum ZDKConnectionState state;
/// Connect to the session
- (void)connect;
/// Disconnect from the current session, closes the socket connection.
/// Please note, this won’t end the chat session with agent
- (void)disconnect;
/// Observe connection state updates. Specify a closure how the state should be handled
/// \param callback Specify how to handle the <code>ConnectionState</code> via closure.
///
///
/// returns:
/// An <code>ObservationToken</code> that can cancel the subscription  to the <code>ConnectionState</code>.
- (ZDKObservationToken * _Nullable)observeConnectionState:(void (^ _Nonnull)(enum ZDKConnectionState))callback SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// The <code>ZDKProfileProvider</code> contain APIs to update information about a visitor.
/// Such as name, email, phone number, tags, and notes related to the visitor and their session.
SWIFT_CLASS_NAMED("ProfileProvider")
@interface ZDKProfileProvider : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class ZDKVisitorPath;

@interface ZDKProfileProvider (SWIFT_EXTENSION(ChatProvidersSDK))
- (void)setVisitorInfo:(ZDKVisitorInfo * _Nonnull)visitorInfo completion:(void (^ _Nullable)(ZDKVisitorInfo * _Nullable, NSError * _Nullable))completion;
- (void)trackVisitorPath:(ZDKVisitorPath * _Nonnull)visitorPath completion:(void (^ _Nullable)(ZDKVisitorPath * _Nullable, NSError * _Nullable))completion;
- (void)addTags:(NSArray<NSString *> * _Nonnull)tags completion:(void (^ _Nullable)(NSArray<NSString *> * _Nullable, NSError * _Nullable))completion;
- (void)removeTags:(NSArray<NSString *> * _Nonnull)tags completion:(void (^ _Nullable)(NSArray<NSString *> * _Nullable, NSError * _Nullable))completion;
- (void)appendNote:(NSString * _Nonnull)note completion:(void (^ _Nullable)(NSString * _Nullable, NSError * _Nullable))completion;
- (void)setNote:(NSString * _Nonnull)note completion:(void (^ _Nullable)(NSString * _Nullable, NSError * _Nullable))completion;
@end


/// <code>ZDKChatProviders</code> is a grouping of all the providers that allow you to, setup for push notifications,
/// handle session updates, handle connection state, and interact with the APIs in other ways.
SWIFT_CLASS_NAMED("Providers")
@interface ZDKChatProviders : NSObject
@property (nonatomic, readonly, strong) ZDKConnectionProvider * _Nonnull connectionProvider;
@property (nonatomic, readonly, strong) ZDKProfileProvider * _Nonnull profileProvider;
@property (nonatomic, readonly, strong) ZDKPushNotificationsProvider * _Nonnull pushNotificationsProvider;
@property (nonatomic, readonly, strong) ZDKChatProvider * _Nonnull chatProvider;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// The <code>ZDKPushNoticiationProvider</code> provides APIs to subscribe to, and handle Zendesk Chat’s Push Notifications.
/// There are two types of chat notifications:
/// <ul>
///   <li>
///     <code>chat.msg</code> - received when a new chat message was sent from an agent
///   </li>
///   <li>
///     <code>chat.end</code> - received when the current chat session ends.
///   </li>
/// </ul>
SWIFT_CLASS_NAMED("PushNotificationsProvider")
@interface ZDKPushNotificationsProvider : NSObject
/// The <code>NSNotification.Name</code> associated with the message received push notificiation
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSNotificationName _Nonnull ChatMessageReceivedNotification;)
+ (NSNotificationName _Nonnull)ChatMessageReceivedNotification SWIFT_WARN_UNUSED_RESULT;
/// The <code>NSNotification.Name</code> associated with chat session ended push notificiation
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSNotificationName _Nonnull ChatEndedNotification;)
+ (NSNotificationName _Nonnull)ChatEndedNotification SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


@interface ZDKPushNotificationsProvider (SWIFT_EXTENSION(ChatProvidersSDK))
/// Unregisters for Push notifications
- (void)unregisterPushToken;
@end


@interface ZDKPushNotificationsProvider (SWIFT_EXTENSION(ChatProvidersSDK))
/// Registers device token with Zendesk Chat
/// \param pushToken device token received in <code>didRegisterForRemoteNotificationsWithDeviceToken</code> after registration.
///
- (void)registerPushToken:(NSData * _Nonnull)pushToken;
@end


@interface ZDKPushNotificationsProvider (SWIFT_EXTENSION(ChatProvidersSDK))
/// Received push notification is processed by Chat SDK.
/// There are two types of chat notifications:
/// <ul>
///   <li>
///     <code>chat.msg</code> - received when a new chat message was sent from an agent
///   </li>
///   <li>
///     <code>chat.end</code> - received when the current chat session ends.
///   </li>
/// </ul>
/// \param userInfo A dictionary that contains information related to the remote notification
///
/// \param application The centralized point of control and coordination for apps running in iOS.
///
- (void)didReceiveRemoteNotification:(NSDictionary * _Nonnull)userInfo in:(UIApplication * _Nonnull)application;
/// Returns <code>true</code> if received push notification belongs to Chat SDK
/// \param userInfo A dictionary that contains information related to the remote notification
///
- (BOOL)isChatPushNotification:(NSDictionary * _Nonnull)userInfo SWIFT_WARN_UNUSED_RESULT;
@end

#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#pragma clang diagnostic pop

#elif defined(__i386__) && __i386__
// Generated by Apple Swift version 5.0.1 (swiftlang-1001.0.82.4 clang-1001.0.46.5)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <Foundation/Foundation.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if __has_attribute(noreturn)
# define SWIFT_NORETURN __attribute__((noreturn))
#else
# define SWIFT_NORETURN
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if defined(__has_attribute) && __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility)
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if __has_feature(attribute_diagnose_if_objc)
# define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
#else
# define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
#endif
#if __has_feature(modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import ChatVisitorClient;
@import Dispatch;
@import Foundation;
@import ObjectiveC;
#endif

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="ChatProvidersSDK",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif

@class ZDKChatProviders;
@class ZDKChatAPIConfig;
@class ZDKConnectionProvider;
@class ZDKProfileProvider;
@class ZDKPushNotificationsProvider;
@class ZDKChatProvider;

/// <code>Chat</code> is a singleton class of the <code>ChatProviderSDK</code>.
/// It needs to be intialized with an <code>accountKey</code> before using any of the Chat APIs.
/// The <code>accountKey</code> can be retrieved from the Zendesk Chat dashboard.
/// \code
/// Chat.initialize(accountKey: accountKey)
///
/// \endcode
SWIFT_CLASS_NAMED("Chat")
@interface ZDKChat : NSObject
/// Chat message received PushNotification name
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSNotificationName _Nonnull NotificationMessageReceived;)
+ (NSNotificationName _Nonnull)NotificationMessageReceived SWIFT_WARN_UNUSED_RESULT;
/// Chat ended PushNotification name
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSNotificationName _Nonnull NotificationChatEnded;)
+ (NSNotificationName _Nonnull)NotificationChatEnded SWIFT_WARN_UNUSED_RESULT;
/// Account key
@property (nonatomic, readonly, copy) NSString * _Nonnull accountKey;
/// Grouping of Zendesk Chat’s providers
@property (nonatomic, readonly, strong) ZDKChatProviders * _Nonnull providers;
/// Static instance of the Chat provider
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) ZDKChat * _Nullable instance;)
+ (ZDKChat * _Nullable)instance SWIFT_WARN_UNUSED_RESULT;
/// Initializes chat with Chat’s accountkey
/// \param accountKey The accountKey from your chat instance
///
/// \param config Chat API configs
///
/// \param queue the queue to dispatch chat operations on. Default is <code>.main</code>
///
+ (void)initializeWithAccountKey:(NSString * _Nonnull)accountKey config:(ZDKChatAPIConfig * _Nullable)config queue:(dispatch_queue_t _Nonnull)queue;
/// Connection Provider
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) ZDKConnectionProvider * _Nullable connectionProvider;)
+ (ZDKConnectionProvider * _Nullable)connectionProvider SWIFT_WARN_UNUSED_RESULT;
/// Profile Provider
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) ZDKProfileProvider * _Nullable profileProvider;)
+ (ZDKProfileProvider * _Nullable)profileProvider SWIFT_WARN_UNUSED_RESULT;
/// Push Notifications Provider
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) ZDKPushNotificationsProvider * _Nullable pushNotificationsProvider;)
+ (ZDKPushNotificationsProvider * _Nullable)pushNotificationsProvider SWIFT_WARN_UNUSED_RESULT;
/// Chat Provider
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) ZDKChatProvider * _Nullable chatProvider;)
+ (ZDKChatProvider * _Nullable)chatProvider SWIFT_WARN_UNUSED_RESULT;
/// Connection Provider
@property (nonatomic, readonly, strong) ZDKConnectionProvider * _Nonnull connectionProvider;
/// Push Notifications Provider
@property (nonatomic, readonly, strong) ZDKPushNotificationsProvider * _Nonnull pushNotificationsProvider;
/// Profile Provider
@property (nonatomic, readonly, strong) ZDKProfileProvider * _Nonnull profileProvider;
/// Chat Provider
@property (nonatomic, readonly, strong) ZDKChatProvider * _Nonnull chatProvider;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class UIApplication;

@interface ZDKChat (SWIFT_EXTENSION(ChatProvidersSDK))
/// Sends push token to server
/// \param pushTokenData device token received in <code>didRegisterForRemoteNotificationsWithDeviceToken</code> after registration
///
+ (void)registerPushToken:(NSData * _Nonnull)pushTokenData;
/// Pass the received remote notification to <code>didReceiveRemoteNotification</code>.
/// If the push notification belongs to Zendesk Chat, the push notification will be processed accordingly
/// There are currently two types of supported Push Notifications:
/// <ul>
///   <li>
///     <code>New chat message</code>
///     <ul>
///       <li>
///         This event happens, when there’s new message typed by an agent.
///         In order to respond to this event, you can observe the notification with name
///         <code>PushNotificationsProvider.ChatMessageReceivedNotification</code> in <code>NotificationCenter</code>.
///       </li>
///     </ul>
///   </li>
///   <li>
///     <code>Chat has ended</code>
///     <ul>
///       <li>
///         When this event is received, the Chat will be ended and the chat session will be disconnected
///         In order to respond to this event, you can observe the notification with name
///         <code>Chat.NotificationChatEnded</code> in <code>NotificationCenter</code>.
///       </li>
///     </ul>
///   </li>
/// </ul>
/// \param userInfo A dictionary that contains information related to the remote notification
///
/// \param application The centralized point of control and coordination for apps running in iOS.
///
+ (void)didReceiveRemoteNotification:(NSDictionary * _Nonnull)userInfo in:(UIApplication * _Nonnull)application;
@end

@class ZDKVisitorInfo;

/// A set of configurations that are associated with each chat session.
/// <h2>Default values</h2>
/// \code
/// visitorPathOne = "" // results to "Direct Path"
/// visitorPathTwo = "Zendesk Chat SDK v\(VersionNumber)"
/// visitorPathTwoURL = Date().iso8601
/// tags = []
/// department = nil
/// visitorInfo = nil
///
/// \endcode
SWIFT_CLASS_NAMED("ChatAPIConfig")
@interface ZDKChatAPIConfig : NSObject
/// This string will be placed in the first line of the visitor path.
/// Defaults to “Direct Path” if not specified.
@property (nonatomic, copy) NSString * _Nonnull visitorPathOne;
/// This string will be placed in the second line of the visitor path.
/// Defaults to “Zendesk Chat SDK v(ChatProvidersSDKVersionNumber)”
@property (nonatomic, copy) NSString * _Nonnull visitorPathTwo;
/// This string can be found when hovering over the second line of the visitor path.
/// Default to ISO8601 timestamp.
@property (nonatomic, copy) NSString * _Nonnull visitorPathTwoURL;
/// The tags to be set when a chat starts.
@property (nonatomic, copy) NSArray<NSString *> * _Nonnull tags;
/// The department to be set when a chat starts.
/// default is <code>nil</code>
@property (nonatomic, copy) NSString * _Nullable department;
/// Set the visitor info.
/// Default is <code>nil</code>. Pass through fields as empty strings to clear info.
@property (nonatomic, strong) ZDKVisitorInfo * _Nullable visitorInfo;
/// Default initializer
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

/// Potential errors returned from the ChatProviderSDK
/// <ul>
///   <li>
///     <code>chatIsNotInitialized</code>
///     Will be thrown if the Chat instance isn’t initialized before initializing <code>ChatUI</code>
///   </li>
///   <li>
///     <code>disconnected</code>
///     Will be emitted when a request is attempted to be sent, but the connection state is disconnected.
///   </li>
/// </ul>
typedef SWIFT_ENUM(NSInteger, ChatError, closed) {
/// Chat was not initialized
  ChatErrorChatIsNotInitialized = 0,
/// Chat is disconnected
  ChatErrorDisconnected = 1,
};
static NSString * _Nonnull const ChatErrorDomain = @"ChatProvidersSDK.ChatError";

@class ZDKChatState;
@class ZDKObservationToken;

/// The <code>ZDKChatProvider</code> provides APIs to interact and observe the current Chat session.
/// It provides APIs to:
/// <ul>
///   <li>
///     proactively request a chat
///   </li>
///   <li>
///     send messages
///   </li>
///   <li>
///     handle failed messages (retry/delete)
///   </li>
///   <li>
///     set the visitors’ typing indicator
///   </li>
///   <li>
///     end the chat
///   </li>
/// </ul>
SWIFT_CLASS_NAMED("ChatProvider")
@interface ZDKChatProvider : NSObject
/// Proactively lets an agent know that the user wants to chat.
- (void)requestChat;
/// Let’s the agent know when the visitor is typing.
/// If <code>true</code>, the visitor typing indicator will appear in agent dashboard, else it will be hidden.
/// \param isTyping isTyping
///
- (void)setTypingWithIsTyping:(BOOL)isTyping;
/// Observe changes of the current chat’s state
/// The conversation thread can be accessed through the <code>logs</code>
/// \param callback block that executes everytime there is an update to the <code>ChatState</code>
///
///
/// returns:
/// An <code>ObservationToken</code> that can cancel the subscription  to the <code>ChatState</code>.
- (ZDKObservationToken * _Nullable)observeChatState:(void (^ _Nonnull)(ZDKChatState * _Nonnull))callback SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


@interface ZDKChatProvider (SWIFT_EXTENSION(ChatProvidersSDK))
- (void)sendMessage:(NSString * _Nonnull)message completion:(void (^ _Nullable)(NSString * _Nullable, NSError * _Nullable))completion;
- (void)resendFailedMessageWithId:(NSString * _Nonnull)id completion:(void (^ _Nullable)(NSString * _Nullable, NSError * _Nullable))completion;
- (void)deleteFailedMessageWithId:(NSString * _Nonnull)id completion:(void (^ _Nullable)(NSString * _Nullable, NSError * _Nullable))completion;
- (void)endChat:(void (^ _Nullable)(BOOL, NSError * _Nullable))completion;
@end


/// <code>ZDKConnectionProvider</code> gives the ability to observe connection updates.
SWIFT_CLASS_NAMED("ConnectionProvider")
@interface ZDKConnectionProvider : NSObject
/// The current state of the Connection
@property (nonatomic, readonly) enum ZDKConnectionState state;
/// Connect to the session
- (void)connect;
/// Disconnect from the current session, closes the socket connection.
/// Please note, this won’t end the chat session with agent
- (void)disconnect;
/// Observe connection state updates. Specify a closure how the state should be handled
/// \param callback Specify how to handle the <code>ConnectionState</code> via closure.
///
///
/// returns:
/// An <code>ObservationToken</code> that can cancel the subscription  to the <code>ConnectionState</code>.
- (ZDKObservationToken * _Nullable)observeConnectionState:(void (^ _Nonnull)(enum ZDKConnectionState))callback SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// The <code>ZDKProfileProvider</code> contain APIs to update information about a visitor.
/// Such as name, email, phone number, tags, and notes related to the visitor and their session.
SWIFT_CLASS_NAMED("ProfileProvider")
@interface ZDKProfileProvider : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class ZDKVisitorPath;

@interface ZDKProfileProvider (SWIFT_EXTENSION(ChatProvidersSDK))
- (void)setVisitorInfo:(ZDKVisitorInfo * _Nonnull)visitorInfo completion:(void (^ _Nullable)(ZDKVisitorInfo * _Nullable, NSError * _Nullable))completion;
- (void)trackVisitorPath:(ZDKVisitorPath * _Nonnull)visitorPath completion:(void (^ _Nullable)(ZDKVisitorPath * _Nullable, NSError * _Nullable))completion;
- (void)addTags:(NSArray<NSString *> * _Nonnull)tags completion:(void (^ _Nullable)(NSArray<NSString *> * _Nullable, NSError * _Nullable))completion;
- (void)removeTags:(NSArray<NSString *> * _Nonnull)tags completion:(void (^ _Nullable)(NSArray<NSString *> * _Nullable, NSError * _Nullable))completion;
- (void)appendNote:(NSString * _Nonnull)note completion:(void (^ _Nullable)(NSString * _Nullable, NSError * _Nullable))completion;
- (void)setNote:(NSString * _Nonnull)note completion:(void (^ _Nullable)(NSString * _Nullable, NSError * _Nullable))completion;
@end


/// <code>ZDKChatProviders</code> is a grouping of all the providers that allow you to, setup for push notifications,
/// handle session updates, handle connection state, and interact with the APIs in other ways.
SWIFT_CLASS_NAMED("Providers")
@interface ZDKChatProviders : NSObject
@property (nonatomic, readonly, strong) ZDKConnectionProvider * _Nonnull connectionProvider;
@property (nonatomic, readonly, strong) ZDKProfileProvider * _Nonnull profileProvider;
@property (nonatomic, readonly, strong) ZDKPushNotificationsProvider * _Nonnull pushNotificationsProvider;
@property (nonatomic, readonly, strong) ZDKChatProvider * _Nonnull chatProvider;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// The <code>ZDKPushNoticiationProvider</code> provides APIs to subscribe to, and handle Zendesk Chat’s Push Notifications.
/// There are two types of chat notifications:
/// <ul>
///   <li>
///     <code>chat.msg</code> - received when a new chat message was sent from an agent
///   </li>
///   <li>
///     <code>chat.end</code> - received when the current chat session ends.
///   </li>
/// </ul>
SWIFT_CLASS_NAMED("PushNotificationsProvider")
@interface ZDKPushNotificationsProvider : NSObject
/// The <code>NSNotification.Name</code> associated with the message received push notificiation
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSNotificationName _Nonnull ChatMessageReceivedNotification;)
+ (NSNotificationName _Nonnull)ChatMessageReceivedNotification SWIFT_WARN_UNUSED_RESULT;
/// The <code>NSNotification.Name</code> associated with chat session ended push notificiation
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSNotificationName _Nonnull ChatEndedNotification;)
+ (NSNotificationName _Nonnull)ChatEndedNotification SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


@interface ZDKPushNotificationsProvider (SWIFT_EXTENSION(ChatProvidersSDK))
/// Unregisters for Push notifications
- (void)unregisterPushToken;
@end


@interface ZDKPushNotificationsProvider (SWIFT_EXTENSION(ChatProvidersSDK))
/// Registers device token with Zendesk Chat
/// \param pushToken device token received in <code>didRegisterForRemoteNotificationsWithDeviceToken</code> after registration.
///
- (void)registerPushToken:(NSData * _Nonnull)pushToken;
@end


@interface ZDKPushNotificationsProvider (SWIFT_EXTENSION(ChatProvidersSDK))
/// Received push notification is processed by Chat SDK.
/// There are two types of chat notifications:
/// <ul>
///   <li>
///     <code>chat.msg</code> - received when a new chat message was sent from an agent
///   </li>
///   <li>
///     <code>chat.end</code> - received when the current chat session ends.
///   </li>
/// </ul>
/// \param userInfo A dictionary that contains information related to the remote notification
///
/// \param application The centralized point of control and coordination for apps running in iOS.
///
- (void)didReceiveRemoteNotification:(NSDictionary * _Nonnull)userInfo in:(UIApplication * _Nonnull)application;
/// Returns <code>true</code> if received push notification belongs to Chat SDK
/// \param userInfo A dictionary that contains information related to the remote notification
///
- (BOOL)isChatPushNotification:(NSDictionary * _Nonnull)userInfo SWIFT_WARN_UNUSED_RESULT;
@end

#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#pragma clang diagnostic pop

#endif
#else
#if 0
#elif defined(__arm64__) && __arm64__
// Generated by Apple Swift version 5.0.1 (swiftlang-1001.0.82.4 clang-1001.0.46.5)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <Foundation/Foundation.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if __has_attribute(noreturn)
# define SWIFT_NORETURN __attribute__((noreturn))
#else
# define SWIFT_NORETURN
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if defined(__has_attribute) && __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility)
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if __has_feature(attribute_diagnose_if_objc)
# define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
#else
# define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
#endif
#if __has_feature(modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import ChatVisitorClient;
@import Dispatch;
@import Foundation;
@import ObjectiveC;
#endif

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="ChatProvidersSDK",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif

@class ZDKChatProviders;
@class ZDKChatAPIConfig;
@class ZDKConnectionProvider;
@class ZDKProfileProvider;
@class ZDKPushNotificationsProvider;
@class ZDKChatProvider;

/// <code>Chat</code> is a singleton class of the <code>ChatProviderSDK</code>.
/// It needs to be intialized with an <code>accountKey</code> before using any of the Chat APIs.
/// The <code>accountKey</code> can be retrieved from the Zendesk Chat dashboard.
/// \code
/// Chat.initialize(accountKey: accountKey)
///
/// \endcode
SWIFT_CLASS_NAMED("Chat")
@interface ZDKChat : NSObject
/// Chat message received PushNotification name
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSNotificationName _Nonnull NotificationMessageReceived;)
+ (NSNotificationName _Nonnull)NotificationMessageReceived SWIFT_WARN_UNUSED_RESULT;
/// Chat ended PushNotification name
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSNotificationName _Nonnull NotificationChatEnded;)
+ (NSNotificationName _Nonnull)NotificationChatEnded SWIFT_WARN_UNUSED_RESULT;
/// Account key
@property (nonatomic, readonly, copy) NSString * _Nonnull accountKey;
/// Grouping of Zendesk Chat’s providers
@property (nonatomic, readonly, strong) ZDKChatProviders * _Nonnull providers;
/// Static instance of the Chat provider
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) ZDKChat * _Nullable instance;)
+ (ZDKChat * _Nullable)instance SWIFT_WARN_UNUSED_RESULT;
/// Initializes chat with Chat’s accountkey
/// \param accountKey The accountKey from your chat instance
///
/// \param config Chat API configs
///
/// \param queue the queue to dispatch chat operations on. Default is <code>.main</code>
///
+ (void)initializeWithAccountKey:(NSString * _Nonnull)accountKey config:(ZDKChatAPIConfig * _Nullable)config queue:(dispatch_queue_t _Nonnull)queue;
/// Connection Provider
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) ZDKConnectionProvider * _Nullable connectionProvider;)
+ (ZDKConnectionProvider * _Nullable)connectionProvider SWIFT_WARN_UNUSED_RESULT;
/// Profile Provider
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) ZDKProfileProvider * _Nullable profileProvider;)
+ (ZDKProfileProvider * _Nullable)profileProvider SWIFT_WARN_UNUSED_RESULT;
/// Push Notifications Provider
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) ZDKPushNotificationsProvider * _Nullable pushNotificationsProvider;)
+ (ZDKPushNotificationsProvider * _Nullable)pushNotificationsProvider SWIFT_WARN_UNUSED_RESULT;
/// Chat Provider
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) ZDKChatProvider * _Nullable chatProvider;)
+ (ZDKChatProvider * _Nullable)chatProvider SWIFT_WARN_UNUSED_RESULT;
/// Connection Provider
@property (nonatomic, readonly, strong) ZDKConnectionProvider * _Nonnull connectionProvider;
/// Push Notifications Provider
@property (nonatomic, readonly, strong) ZDKPushNotificationsProvider * _Nonnull pushNotificationsProvider;
/// Profile Provider
@property (nonatomic, readonly, strong) ZDKProfileProvider * _Nonnull profileProvider;
/// Chat Provider
@property (nonatomic, readonly, strong) ZDKChatProvider * _Nonnull chatProvider;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class UIApplication;

@interface ZDKChat (SWIFT_EXTENSION(ChatProvidersSDK))
/// Sends push token to server
/// \param pushTokenData device token received in <code>didRegisterForRemoteNotificationsWithDeviceToken</code> after registration
///
+ (void)registerPushToken:(NSData * _Nonnull)pushTokenData;
/// Pass the received remote notification to <code>didReceiveRemoteNotification</code>.
/// If the push notification belongs to Zendesk Chat, the push notification will be processed accordingly
/// There are currently two types of supported Push Notifications:
/// <ul>
///   <li>
///     <code>New chat message</code>
///     <ul>
///       <li>
///         This event happens, when there’s new message typed by an agent.
///         In order to respond to this event, you can observe the notification with name
///         <code>PushNotificationsProvider.ChatMessageReceivedNotification</code> in <code>NotificationCenter</code>.
///       </li>
///     </ul>
///   </li>
///   <li>
///     <code>Chat has ended</code>
///     <ul>
///       <li>
///         When this event is received, the Chat will be ended and the chat session will be disconnected
///         In order to respond to this event, you can observe the notification with name
///         <code>Chat.NotificationChatEnded</code> in <code>NotificationCenter</code>.
///       </li>
///     </ul>
///   </li>
/// </ul>
/// \param userInfo A dictionary that contains information related to the remote notification
///
/// \param application The centralized point of control and coordination for apps running in iOS.
///
+ (void)didReceiveRemoteNotification:(NSDictionary * _Nonnull)userInfo in:(UIApplication * _Nonnull)application;
@end

@class ZDKVisitorInfo;

/// A set of configurations that are associated with each chat session.
/// <h2>Default values</h2>
/// \code
/// visitorPathOne = "" // results to "Direct Path"
/// visitorPathTwo = "Zendesk Chat SDK v\(VersionNumber)"
/// visitorPathTwoURL = Date().iso8601
/// tags = []
/// department = nil
/// visitorInfo = nil
///
/// \endcode
SWIFT_CLASS_NAMED("ChatAPIConfig")
@interface ZDKChatAPIConfig : NSObject
/// This string will be placed in the first line of the visitor path.
/// Defaults to “Direct Path” if not specified.
@property (nonatomic, copy) NSString * _Nonnull visitorPathOne;
/// This string will be placed in the second line of the visitor path.
/// Defaults to “Zendesk Chat SDK v(ChatProvidersSDKVersionNumber)”
@property (nonatomic, copy) NSString * _Nonnull visitorPathTwo;
/// This string can be found when hovering over the second line of the visitor path.
/// Default to ISO8601 timestamp.
@property (nonatomic, copy) NSString * _Nonnull visitorPathTwoURL;
/// The tags to be set when a chat starts.
@property (nonatomic, copy) NSArray<NSString *> * _Nonnull tags;
/// The department to be set when a chat starts.
/// default is <code>nil</code>
@property (nonatomic, copy) NSString * _Nullable department;
/// Set the visitor info.
/// Default is <code>nil</code>. Pass through fields as empty strings to clear info.
@property (nonatomic, strong) ZDKVisitorInfo * _Nullable visitorInfo;
/// Default initializer
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

/// Potential errors returned from the ChatProviderSDK
/// <ul>
///   <li>
///     <code>chatIsNotInitialized</code>
///     Will be thrown if the Chat instance isn’t initialized before initializing <code>ChatUI</code>
///   </li>
///   <li>
///     <code>disconnected</code>
///     Will be emitted when a request is attempted to be sent, but the connection state is disconnected.
///   </li>
/// </ul>
typedef SWIFT_ENUM(NSInteger, ChatError, closed) {
/// Chat was not initialized
  ChatErrorChatIsNotInitialized = 0,
/// Chat is disconnected
  ChatErrorDisconnected = 1,
};
static NSString * _Nonnull const ChatErrorDomain = @"ChatProvidersSDK.ChatError";

@class ZDKChatState;
@class ZDKObservationToken;

/// The <code>ZDKChatProvider</code> provides APIs to interact and observe the current Chat session.
/// It provides APIs to:
/// <ul>
///   <li>
///     proactively request a chat
///   </li>
///   <li>
///     send messages
///   </li>
///   <li>
///     handle failed messages (retry/delete)
///   </li>
///   <li>
///     set the visitors’ typing indicator
///   </li>
///   <li>
///     end the chat
///   </li>
/// </ul>
SWIFT_CLASS_NAMED("ChatProvider")
@interface ZDKChatProvider : NSObject
/// Proactively lets an agent know that the user wants to chat.
- (void)requestChat;
/// Let’s the agent know when the visitor is typing.
/// If <code>true</code>, the visitor typing indicator will appear in agent dashboard, else it will be hidden.
/// \param isTyping isTyping
///
- (void)setTypingWithIsTyping:(BOOL)isTyping;
/// Observe changes of the current chat’s state
/// The conversation thread can be accessed through the <code>logs</code>
/// \param callback block that executes everytime there is an update to the <code>ChatState</code>
///
///
/// returns:
/// An <code>ObservationToken</code> that can cancel the subscription  to the <code>ChatState</code>.
- (ZDKObservationToken * _Nullable)observeChatState:(void (^ _Nonnull)(ZDKChatState * _Nonnull))callback SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


@interface ZDKChatProvider (SWIFT_EXTENSION(ChatProvidersSDK))
- (void)sendMessage:(NSString * _Nonnull)message completion:(void (^ _Nullable)(NSString * _Nullable, NSError * _Nullable))completion;
- (void)resendFailedMessageWithId:(NSString * _Nonnull)id completion:(void (^ _Nullable)(NSString * _Nullable, NSError * _Nullable))completion;
- (void)deleteFailedMessageWithId:(NSString * _Nonnull)id completion:(void (^ _Nullable)(NSString * _Nullable, NSError * _Nullable))completion;
- (void)endChat:(void (^ _Nullable)(BOOL, NSError * _Nullable))completion;
@end


/// <code>ZDKConnectionProvider</code> gives the ability to observe connection updates.
SWIFT_CLASS_NAMED("ConnectionProvider")
@interface ZDKConnectionProvider : NSObject
/// The current state of the Connection
@property (nonatomic, readonly) enum ZDKConnectionState state;
/// Connect to the session
- (void)connect;
/// Disconnect from the current session, closes the socket connection.
/// Please note, this won’t end the chat session with agent
- (void)disconnect;
/// Observe connection state updates. Specify a closure how the state should be handled
/// \param callback Specify how to handle the <code>ConnectionState</code> via closure.
///
///
/// returns:
/// An <code>ObservationToken</code> that can cancel the subscription  to the <code>ConnectionState</code>.
- (ZDKObservationToken * _Nullable)observeConnectionState:(void (^ _Nonnull)(enum ZDKConnectionState))callback SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// The <code>ZDKProfileProvider</code> contain APIs to update information about a visitor.
/// Such as name, email, phone number, tags, and notes related to the visitor and their session.
SWIFT_CLASS_NAMED("ProfileProvider")
@interface ZDKProfileProvider : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class ZDKVisitorPath;

@interface ZDKProfileProvider (SWIFT_EXTENSION(ChatProvidersSDK))
- (void)setVisitorInfo:(ZDKVisitorInfo * _Nonnull)visitorInfo completion:(void (^ _Nullable)(ZDKVisitorInfo * _Nullable, NSError * _Nullable))completion;
- (void)trackVisitorPath:(ZDKVisitorPath * _Nonnull)visitorPath completion:(void (^ _Nullable)(ZDKVisitorPath * _Nullable, NSError * _Nullable))completion;
- (void)addTags:(NSArray<NSString *> * _Nonnull)tags completion:(void (^ _Nullable)(NSArray<NSString *> * _Nullable, NSError * _Nullable))completion;
- (void)removeTags:(NSArray<NSString *> * _Nonnull)tags completion:(void (^ _Nullable)(NSArray<NSString *> * _Nullable, NSError * _Nullable))completion;
- (void)appendNote:(NSString * _Nonnull)note completion:(void (^ _Nullable)(NSString * _Nullable, NSError * _Nullable))completion;
- (void)setNote:(NSString * _Nonnull)note completion:(void (^ _Nullable)(NSString * _Nullable, NSError * _Nullable))completion;
@end


/// <code>ZDKChatProviders</code> is a grouping of all the providers that allow you to, setup for push notifications,
/// handle session updates, handle connection state, and interact with the APIs in other ways.
SWIFT_CLASS_NAMED("Providers")
@interface ZDKChatProviders : NSObject
@property (nonatomic, readonly, strong) ZDKConnectionProvider * _Nonnull connectionProvider;
@property (nonatomic, readonly, strong) ZDKProfileProvider * _Nonnull profileProvider;
@property (nonatomic, readonly, strong) ZDKPushNotificationsProvider * _Nonnull pushNotificationsProvider;
@property (nonatomic, readonly, strong) ZDKChatProvider * _Nonnull chatProvider;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// The <code>ZDKPushNoticiationProvider</code> provides APIs to subscribe to, and handle Zendesk Chat’s Push Notifications.
/// There are two types of chat notifications:
/// <ul>
///   <li>
///     <code>chat.msg</code> - received when a new chat message was sent from an agent
///   </li>
///   <li>
///     <code>chat.end</code> - received when the current chat session ends.
///   </li>
/// </ul>
SWIFT_CLASS_NAMED("PushNotificationsProvider")
@interface ZDKPushNotificationsProvider : NSObject
/// The <code>NSNotification.Name</code> associated with the message received push notificiation
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSNotificationName _Nonnull ChatMessageReceivedNotification;)
+ (NSNotificationName _Nonnull)ChatMessageReceivedNotification SWIFT_WARN_UNUSED_RESULT;
/// The <code>NSNotification.Name</code> associated with chat session ended push notificiation
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSNotificationName _Nonnull ChatEndedNotification;)
+ (NSNotificationName _Nonnull)ChatEndedNotification SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


@interface ZDKPushNotificationsProvider (SWIFT_EXTENSION(ChatProvidersSDK))
/// Unregisters for Push notifications
- (void)unregisterPushToken;
@end


@interface ZDKPushNotificationsProvider (SWIFT_EXTENSION(ChatProvidersSDK))
/// Registers device token with Zendesk Chat
/// \param pushToken device token received in <code>didRegisterForRemoteNotificationsWithDeviceToken</code> after registration.
///
- (void)registerPushToken:(NSData * _Nonnull)pushToken;
@end


@interface ZDKPushNotificationsProvider (SWIFT_EXTENSION(ChatProvidersSDK))
/// Received push notification is processed by Chat SDK.
/// There are two types of chat notifications:
/// <ul>
///   <li>
///     <code>chat.msg</code> - received when a new chat message was sent from an agent
///   </li>
///   <li>
///     <code>chat.end</code> - received when the current chat session ends.
///   </li>
/// </ul>
/// \param userInfo A dictionary that contains information related to the remote notification
///
/// \param application The centralized point of control and coordination for apps running in iOS.
///
- (void)didReceiveRemoteNotification:(NSDictionary * _Nonnull)userInfo in:(UIApplication * _Nonnull)application;
/// Returns <code>true</code> if received push notification belongs to Chat SDK
/// \param userInfo A dictionary that contains information related to the remote notification
///
- (BOOL)isChatPushNotification:(NSDictionary * _Nonnull)userInfo SWIFT_WARN_UNUSED_RESULT;
@end

#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#pragma clang diagnostic pop

#elif defined(__ARM_ARCH_7A__) && __ARM_ARCH_7A__
// Generated by Apple Swift version 5.0.1 (swiftlang-1001.0.82.4 clang-1001.0.46.5)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <Foundation/Foundation.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if __has_attribute(noreturn)
# define SWIFT_NORETURN __attribute__((noreturn))
#else
# define SWIFT_NORETURN
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if defined(__has_attribute) && __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility)
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if __has_feature(attribute_diagnose_if_objc)
# define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
#else
# define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
#endif
#if __has_feature(modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import ChatVisitorClient;
@import Dispatch;
@import Foundation;
@import ObjectiveC;
#endif

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="ChatProvidersSDK",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif

@class ZDKChatProviders;
@class ZDKChatAPIConfig;
@class ZDKConnectionProvider;
@class ZDKProfileProvider;
@class ZDKPushNotificationsProvider;
@class ZDKChatProvider;

/// <code>Chat</code> is a singleton class of the <code>ChatProviderSDK</code>.
/// It needs to be intialized with an <code>accountKey</code> before using any of the Chat APIs.
/// The <code>accountKey</code> can be retrieved from the Zendesk Chat dashboard.
/// \code
/// Chat.initialize(accountKey: accountKey)
///
/// \endcode
SWIFT_CLASS_NAMED("Chat")
@interface ZDKChat : NSObject
/// Chat message received PushNotification name
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSNotificationName _Nonnull NotificationMessageReceived;)
+ (NSNotificationName _Nonnull)NotificationMessageReceived SWIFT_WARN_UNUSED_RESULT;
/// Chat ended PushNotification name
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSNotificationName _Nonnull NotificationChatEnded;)
+ (NSNotificationName _Nonnull)NotificationChatEnded SWIFT_WARN_UNUSED_RESULT;
/// Account key
@property (nonatomic, readonly, copy) NSString * _Nonnull accountKey;
/// Grouping of Zendesk Chat’s providers
@property (nonatomic, readonly, strong) ZDKChatProviders * _Nonnull providers;
/// Static instance of the Chat provider
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) ZDKChat * _Nullable instance;)
+ (ZDKChat * _Nullable)instance SWIFT_WARN_UNUSED_RESULT;
/// Initializes chat with Chat’s accountkey
/// \param accountKey The accountKey from your chat instance
///
/// \param config Chat API configs
///
/// \param queue the queue to dispatch chat operations on. Default is <code>.main</code>
///
+ (void)initializeWithAccountKey:(NSString * _Nonnull)accountKey config:(ZDKChatAPIConfig * _Nullable)config queue:(dispatch_queue_t _Nonnull)queue;
/// Connection Provider
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) ZDKConnectionProvider * _Nullable connectionProvider;)
+ (ZDKConnectionProvider * _Nullable)connectionProvider SWIFT_WARN_UNUSED_RESULT;
/// Profile Provider
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) ZDKProfileProvider * _Nullable profileProvider;)
+ (ZDKProfileProvider * _Nullable)profileProvider SWIFT_WARN_UNUSED_RESULT;
/// Push Notifications Provider
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) ZDKPushNotificationsProvider * _Nullable pushNotificationsProvider;)
+ (ZDKPushNotificationsProvider * _Nullable)pushNotificationsProvider SWIFT_WARN_UNUSED_RESULT;
/// Chat Provider
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) ZDKChatProvider * _Nullable chatProvider;)
+ (ZDKChatProvider * _Nullable)chatProvider SWIFT_WARN_UNUSED_RESULT;
/// Connection Provider
@property (nonatomic, readonly, strong) ZDKConnectionProvider * _Nonnull connectionProvider;
/// Push Notifications Provider
@property (nonatomic, readonly, strong) ZDKPushNotificationsProvider * _Nonnull pushNotificationsProvider;
/// Profile Provider
@property (nonatomic, readonly, strong) ZDKProfileProvider * _Nonnull profileProvider;
/// Chat Provider
@property (nonatomic, readonly, strong) ZDKChatProvider * _Nonnull chatProvider;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class UIApplication;

@interface ZDKChat (SWIFT_EXTENSION(ChatProvidersSDK))
/// Sends push token to server
/// \param pushTokenData device token received in <code>didRegisterForRemoteNotificationsWithDeviceToken</code> after registration
///
+ (void)registerPushToken:(NSData * _Nonnull)pushTokenData;
/// Pass the received remote notification to <code>didReceiveRemoteNotification</code>.
/// If the push notification belongs to Zendesk Chat, the push notification will be processed accordingly
/// There are currently two types of supported Push Notifications:
/// <ul>
///   <li>
///     <code>New chat message</code>
///     <ul>
///       <li>
///         This event happens, when there’s new message typed by an agent.
///         In order to respond to this event, you can observe the notification with name
///         <code>PushNotificationsProvider.ChatMessageReceivedNotification</code> in <code>NotificationCenter</code>.
///       </li>
///     </ul>
///   </li>
///   <li>
///     <code>Chat has ended</code>
///     <ul>
///       <li>
///         When this event is received, the Chat will be ended and the chat session will be disconnected
///         In order to respond to this event, you can observe the notification with name
///         <code>Chat.NotificationChatEnded</code> in <code>NotificationCenter</code>.
///       </li>
///     </ul>
///   </li>
/// </ul>
/// \param userInfo A dictionary that contains information related to the remote notification
///
/// \param application The centralized point of control and coordination for apps running in iOS.
///
+ (void)didReceiveRemoteNotification:(NSDictionary * _Nonnull)userInfo in:(UIApplication * _Nonnull)application;
@end

@class ZDKVisitorInfo;

/// A set of configurations that are associated with each chat session.
/// <h2>Default values</h2>
/// \code
/// visitorPathOne = "" // results to "Direct Path"
/// visitorPathTwo = "Zendesk Chat SDK v\(VersionNumber)"
/// visitorPathTwoURL = Date().iso8601
/// tags = []
/// department = nil
/// visitorInfo = nil
///
/// \endcode
SWIFT_CLASS_NAMED("ChatAPIConfig")
@interface ZDKChatAPIConfig : NSObject
/// This string will be placed in the first line of the visitor path.
/// Defaults to “Direct Path” if not specified.
@property (nonatomic, copy) NSString * _Nonnull visitorPathOne;
/// This string will be placed in the second line of the visitor path.
/// Defaults to “Zendesk Chat SDK v(ChatProvidersSDKVersionNumber)”
@property (nonatomic, copy) NSString * _Nonnull visitorPathTwo;
/// This string can be found when hovering over the second line of the visitor path.
/// Default to ISO8601 timestamp.
@property (nonatomic, copy) NSString * _Nonnull visitorPathTwoURL;
/// The tags to be set when a chat starts.
@property (nonatomic, copy) NSArray<NSString *> * _Nonnull tags;
/// The department to be set when a chat starts.
/// default is <code>nil</code>
@property (nonatomic, copy) NSString * _Nullable department;
/// Set the visitor info.
/// Default is <code>nil</code>. Pass through fields as empty strings to clear info.
@property (nonatomic, strong) ZDKVisitorInfo * _Nullable visitorInfo;
/// Default initializer
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

/// Potential errors returned from the ChatProviderSDK
/// <ul>
///   <li>
///     <code>chatIsNotInitialized</code>
///     Will be thrown if the Chat instance isn’t initialized before initializing <code>ChatUI</code>
///   </li>
///   <li>
///     <code>disconnected</code>
///     Will be emitted when a request is attempted to be sent, but the connection state is disconnected.
///   </li>
/// </ul>
typedef SWIFT_ENUM(NSInteger, ChatError, closed) {
/// Chat was not initialized
  ChatErrorChatIsNotInitialized = 0,
/// Chat is disconnected
  ChatErrorDisconnected = 1,
};
static NSString * _Nonnull const ChatErrorDomain = @"ChatProvidersSDK.ChatError";

@class ZDKChatState;
@class ZDKObservationToken;

/// The <code>ZDKChatProvider</code> provides APIs to interact and observe the current Chat session.
/// It provides APIs to:
/// <ul>
///   <li>
///     proactively request a chat
///   </li>
///   <li>
///     send messages
///   </li>
///   <li>
///     handle failed messages (retry/delete)
///   </li>
///   <li>
///     set the visitors’ typing indicator
///   </li>
///   <li>
///     end the chat
///   </li>
/// </ul>
SWIFT_CLASS_NAMED("ChatProvider")
@interface ZDKChatProvider : NSObject
/// Proactively lets an agent know that the user wants to chat.
- (void)requestChat;
/// Let’s the agent know when the visitor is typing.
/// If <code>true</code>, the visitor typing indicator will appear in agent dashboard, else it will be hidden.
/// \param isTyping isTyping
///
- (void)setTypingWithIsTyping:(BOOL)isTyping;
/// Observe changes of the current chat’s state
/// The conversation thread can be accessed through the <code>logs</code>
/// \param callback block that executes everytime there is an update to the <code>ChatState</code>
///
///
/// returns:
/// An <code>ObservationToken</code> that can cancel the subscription  to the <code>ChatState</code>.
- (ZDKObservationToken * _Nullable)observeChatState:(void (^ _Nonnull)(ZDKChatState * _Nonnull))callback SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


@interface ZDKChatProvider (SWIFT_EXTENSION(ChatProvidersSDK))
- (void)sendMessage:(NSString * _Nonnull)message completion:(void (^ _Nullable)(NSString * _Nullable, NSError * _Nullable))completion;
- (void)resendFailedMessageWithId:(NSString * _Nonnull)id completion:(void (^ _Nullable)(NSString * _Nullable, NSError * _Nullable))completion;
- (void)deleteFailedMessageWithId:(NSString * _Nonnull)id completion:(void (^ _Nullable)(NSString * _Nullable, NSError * _Nullable))completion;
- (void)endChat:(void (^ _Nullable)(BOOL, NSError * _Nullable))completion;
@end


/// <code>ZDKConnectionProvider</code> gives the ability to observe connection updates.
SWIFT_CLASS_NAMED("ConnectionProvider")
@interface ZDKConnectionProvider : NSObject
/// The current state of the Connection
@property (nonatomic, readonly) enum ZDKConnectionState state;
/// Connect to the session
- (void)connect;
/// Disconnect from the current session, closes the socket connection.
/// Please note, this won’t end the chat session with agent
- (void)disconnect;
/// Observe connection state updates. Specify a closure how the state should be handled
/// \param callback Specify how to handle the <code>ConnectionState</code> via closure.
///
///
/// returns:
/// An <code>ObservationToken</code> that can cancel the subscription  to the <code>ConnectionState</code>.
- (ZDKObservationToken * _Nullable)observeConnectionState:(void (^ _Nonnull)(enum ZDKConnectionState))callback SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// The <code>ZDKProfileProvider</code> contain APIs to update information about a visitor.
/// Such as name, email, phone number, tags, and notes related to the visitor and their session.
SWIFT_CLASS_NAMED("ProfileProvider")
@interface ZDKProfileProvider : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class ZDKVisitorPath;

@interface ZDKProfileProvider (SWIFT_EXTENSION(ChatProvidersSDK))
- (void)setVisitorInfo:(ZDKVisitorInfo * _Nonnull)visitorInfo completion:(void (^ _Nullable)(ZDKVisitorInfo * _Nullable, NSError * _Nullable))completion;
- (void)trackVisitorPath:(ZDKVisitorPath * _Nonnull)visitorPath completion:(void (^ _Nullable)(ZDKVisitorPath * _Nullable, NSError * _Nullable))completion;
- (void)addTags:(NSArray<NSString *> * _Nonnull)tags completion:(void (^ _Nullable)(NSArray<NSString *> * _Nullable, NSError * _Nullable))completion;
- (void)removeTags:(NSArray<NSString *> * _Nonnull)tags completion:(void (^ _Nullable)(NSArray<NSString *> * _Nullable, NSError * _Nullable))completion;
- (void)appendNote:(NSString * _Nonnull)note completion:(void (^ _Nullable)(NSString * _Nullable, NSError * _Nullable))completion;
- (void)setNote:(NSString * _Nonnull)note completion:(void (^ _Nullable)(NSString * _Nullable, NSError * _Nullable))completion;
@end


/// <code>ZDKChatProviders</code> is a grouping of all the providers that allow you to, setup for push notifications,
/// handle session updates, handle connection state, and interact with the APIs in other ways.
SWIFT_CLASS_NAMED("Providers")
@interface ZDKChatProviders : NSObject
@property (nonatomic, readonly, strong) ZDKConnectionProvider * _Nonnull connectionProvider;
@property (nonatomic, readonly, strong) ZDKProfileProvider * _Nonnull profileProvider;
@property (nonatomic, readonly, strong) ZDKPushNotificationsProvider * _Nonnull pushNotificationsProvider;
@property (nonatomic, readonly, strong) ZDKChatProvider * _Nonnull chatProvider;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// The <code>ZDKPushNoticiationProvider</code> provides APIs to subscribe to, and handle Zendesk Chat’s Push Notifications.
/// There are two types of chat notifications:
/// <ul>
///   <li>
///     <code>chat.msg</code> - received when a new chat message was sent from an agent
///   </li>
///   <li>
///     <code>chat.end</code> - received when the current chat session ends.
///   </li>
/// </ul>
SWIFT_CLASS_NAMED("PushNotificationsProvider")
@interface ZDKPushNotificationsProvider : NSObject
/// The <code>NSNotification.Name</code> associated with the message received push notificiation
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSNotificationName _Nonnull ChatMessageReceivedNotification;)
+ (NSNotificationName _Nonnull)ChatMessageReceivedNotification SWIFT_WARN_UNUSED_RESULT;
/// The <code>NSNotification.Name</code> associated with chat session ended push notificiation
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSNotificationName _Nonnull ChatEndedNotification;)
+ (NSNotificationName _Nonnull)ChatEndedNotification SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


@interface ZDKPushNotificationsProvider (SWIFT_EXTENSION(ChatProvidersSDK))
/// Unregisters for Push notifications
- (void)unregisterPushToken;
@end


@interface ZDKPushNotificationsProvider (SWIFT_EXTENSION(ChatProvidersSDK))
/// Registers device token with Zendesk Chat
/// \param pushToken device token received in <code>didRegisterForRemoteNotificationsWithDeviceToken</code> after registration.
///
- (void)registerPushToken:(NSData * _Nonnull)pushToken;
@end


@interface ZDKPushNotificationsProvider (SWIFT_EXTENSION(ChatProvidersSDK))
/// Received push notification is processed by Chat SDK.
/// There are two types of chat notifications:
/// <ul>
///   <li>
///     <code>chat.msg</code> - received when a new chat message was sent from an agent
///   </li>
///   <li>
///     <code>chat.end</code> - received when the current chat session ends.
///   </li>
/// </ul>
/// \param userInfo A dictionary that contains information related to the remote notification
///
/// \param application The centralized point of control and coordination for apps running in iOS.
///
- (void)didReceiveRemoteNotification:(NSDictionary * _Nonnull)userInfo in:(UIApplication * _Nonnull)application;
/// Returns <code>true</code> if received push notification belongs to Chat SDK
/// \param userInfo A dictionary that contains information related to the remote notification
///
- (BOOL)isChatPushNotification:(NSDictionary * _Nonnull)userInfo SWIFT_WARN_UNUSED_RESULT;
@end

#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#pragma clang diagnostic pop

#endif
#endif
